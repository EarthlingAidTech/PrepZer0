<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <title>Select Questions from Database</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 10px;
            background-color: #141D2F;
        }
        .main-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 123, 255, 0.1);
            border: 3px solid #1D4ED8;
            max-width: 1400px;
            margin: 20px auto;
        }
        .header-section {
            background: linear-gradient(135deg, #1D4ED8, #3B82F6);
            color: white;
            padding: 20px;
            border-radius: 7px 7px 0 0;
        }
        .sticky-controls {
            position: sticky;
            top: 0;
            background: white;
            z-index: 100;
            border-bottom: 2px solid #e9ecef;
            padding: 15px 20px;
        }
        .content-area {
            padding: 0 20px 20px 20px;
            max-height: 70vh;
            overflow-y: auto;
        }
        .info-stats {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }
        .stat-box {
            background: rgba(255,255,255,0.1);
            padding: 10px 15px;
            border-radius: 8px;
            text-align: center;
        }
        .filters-row {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        .filter-group label {
            font-weight: 600;
            font-size: 0.9rem;
            color: #495057;
        }
        .checkbox-group {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .checkbox-group .form-check {
            margin: 0;
            padding: 5px 10px;
            background: #f8f9fa;
            border-radius: 15px;
            border: 1px solid #dee2e6;
            transition: all 0.2s;
        }
        .checkbox-group .form-check:hover {
            background: #e9ecef;
        }
        .checkbox-group .form-check-input:checked + .form-check-label {
            color: #1D4ED8;
            font-weight: 600;
        }
        .action-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }
        .btn-sm-custom {
            padding: 6px 12px;
            font-size: 0.85rem;
        }
        .submit-area {
            position: sticky;
            bottom: 0;
            background: white;
            border-top: 2px solid #e9ecef;
            padding: 15px 20px;
            text-align: center;
        }
        .category-section {
            margin-bottom: 25px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
        }
        .category-header {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 12px 20px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .category-title {
            margin: 0;
            font-size: 1.1rem;
            color: #495057;
        }
        .questions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 15px;
            padding: 20px;
        }
        .question-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.3s ease;
            background: white;
        }
        .question-card:hover {
            border-color: #1D4ED8;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .question-card.selected {
            border-color: #1D4ED8;
            background: linear-gradient(135deg, #f0f7ff, #e6f0ff);
            box-shadow: 0 2px 8px rgba(29, 78, 216, 0.2);
        }
        .question-header {
            display: flex;
            align-items: flex-start;
            gap: 10px;
            margin-bottom: 10px;
        }
        .question-title {
            font-size: 1rem;
            font-weight: 600;
            margin: 0;
            flex: 1;
            line-height: 1.3;
        }
        .question-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-size: 0.85rem;
        }
        .difficulty-easy { color: #28a745; font-weight: bold; }
        .difficulty-medium { color: #fd7e14; font-weight: bold; }
        .difficulty-hard { color: #dc3545; font-weight: bold; }
        .question-description {
            font-size: 0.9rem;
            color: #6c757d;
            margin-bottom: 10px;
            line-height: 1.4;
        }
        .hidden { display: none !important; }
        .selection-summary {
            background: #e6f0ff;
            border: 1px solid #b3d1ff;
            border-radius: 8px;
            padding: 10px 15px;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }
        .badge-custom {
            font-size: 0.75rem;
            padding: 4px 8px;
        }
        .compact-filters {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            border: 1px solid #dee2e6;
        }
        @media (max-width: 768px) {
            .questions-grid {
                grid-template-columns: 1fr;
            }
            .filters-row {
                flex-direction: column;
                align-items: stretch;
            }
            .action-buttons {
                justify-content: center;
            }
        }
    </style>
</head>
<body>

<div class="main-container">
    <!-- Header Section -->
    <div class="header-section">
        <h1 class="mb-3 text-center">Select Coding Questions from Database</h1>
        <div class="info-stats">
            <div class="stat-box">
                <div><strong>Exam:</strong> <%= exam.name %></div>
            </div>
            <div class="stat-box">
                <div><strong>Required:</strong> <span id="requiredCount"><%= exam.numCoding - codingQuestions.length %></span></div>
            </div>
            <div class="stat-box">
                <div><strong>Selected:</strong> <span id="selectedCount">0</span></div>
            </div>
        </div>
    </div>

    <!-- Sticky Controls -->
    <div class="sticky-controls">
        <div class="selection-summary">
            <strong>Selection Progress:</strong> <span id="progressText">0 of <%= exam.numCoding - codingQuestions.length %> questions selected</span>
        </div>
        
        <div class="compact-filters">
            <div class="filters-row">
                <!-- Categories Filter -->
                <div class="filter-group">
                    <label>Categories</label>
                    <div class="checkbox-group" id="categoryFilters">
                        <!-- Will be populated dynamically -->
                    </div>
                </div>
                
                <!-- Difficulty Filter -->
                <div class="filter-group">
                    <label>Difficulty</label>
                    <div class="checkbox-group">
                        <div class="form-check">
                            <input class="form-check-input difficulty-filter" type="checkbox" id="easyFilter" value="easy" checked>
                            <label class="form-check-label difficulty-easy" for="easyFilter">Easy</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input difficulty-filter" type="checkbox" id="mediumFilter" value="medium" checked>
                            <label class="form-check-label difficulty-medium" for="mediumFilter">Medium</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input difficulty-filter" type="checkbox" id="hardFilter" value="hard" checked>
                            <label class="form-check-label difficulty-hard" for="hardFilter">Hard</label>
                        </div>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="filter-group">
                    <label>Actions</label>
                    <div class="action-buttons">
                        <button id="autoSelectBtn" class="btn btn-success btn-sm-custom">Auto Select All</button>
                        <button id="autoCompleteBtn" class="btn btn-warning btn-sm-custom">Complete Selection</button>
                        <button id="clearAllBtn" class="btn btn-outline-danger btn-sm-custom">Clear All</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Area -->
    <div class="content-area">
        <form id="questionSelectionForm" action="/admin/<%= exam._id %>/add/coding/from-database" method="POST">
            <div id="categorySections">
                <% 
                // Group questions by category
                const questionsByCategory = {};
                dbQuestions.forEach(question => {
                    if (!questionsByCategory[question.classification]) {
                        questionsByCategory[question.classification] = [];
                    }
                    questionsByCategory[question.classification].push(question);
                });
                
                // Display questions by category
                Object.keys(questionsByCategory).sort().forEach(category => {
                    const questions = questionsByCategory[category];
                %>
                    <div class="category-section" data-category="<%= category %>">
                        <div class="category-header">
                            <div>
                                <h3 class="category-title"><%= category %> (<%= questions.length %> questions)</h3>
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                <span class="badge bg-success badge-custom">Easy: <%= questions.filter(q => q.level === 'easy').length %></span>
                                <span class="badge bg-warning badge-custom">Medium: <%= questions.filter(q => q.level === 'medium').length %></span>
                                <span class="badge bg-danger badge-custom">Hard: <%= questions.filter(q => q.level === 'hard').length %></span>
                                <button type="button" class="btn btn-primary btn-sm select-all-category-btn" data-category="<%= category %>">Toggle All</button>
                            </div>
                        </div>
                        
                        <div class="questions-grid">
                            <% questions.forEach(question => { %>
                                <div class="question-card" data-difficulty="<%= question.level %>" data-category="<%= category %>">
                                    <div class="question-header">
                                        <input class="form-check-input question-checkbox" type="checkbox" name="selectedQuestions" value="<%= question._id %>" id="question_<%= question._id %>">
                                        <h4 class="question-title"><%= question.questionTile %></h4>
                                    </div>
                                    
                                    <div class="question-meta">
                                        <span class="difficulty-<%= question.level %>"><%= question.level.charAt(0).toUpperCase() + question.level.slice(1) %></span>
                                        <span><strong><%= question.maxMarks %></strong> marks</span>
                                        <span><%= question.testCases.length %> tests</span>
                                    </div>
                                    
                                    <div class="question-description">
                                        <%= question.questiontext.substring(0, 120) %><%= question.questiontext.length > 120 ? '...' : '' %>
                                    </div>
                                    
                                    <button type="button" class="btn btn-outline-primary btn-sm preview-btn" data-bs-toggle="modal" data-bs-target="#previewModal" data-question-id="<%= question._id %>">
                                        Preview
                                    </button>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                <% }); %>
            </div>
        </form>
    </div>

    <!-- Submit Area (Sticky Bottom) -->
    <div class="submit-area">
        <button type="submit" form="questionSelectionForm" class="btn btn-primary btn-lg" id="addSelectedQuestionsBtn">
            Add <span id="submitBtnCount">0</span> Selected Questions
        </button>
        <a href="/admin/exam/<%= exam._id %>/questions" class="btn btn-secondary btn-lg ms-3">⬅ Back</a>
    </div>
</div>

<!-- Question Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewModalLabel">Question Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="previewModalBody">
                <!-- Question details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="selectFromPreviewBtn">Select Question</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const requiredCount = parseInt(document.getElementById('requiredCount').textContent);
        const selectedCountEl = document.getElementById('selectedCount');
        const submitBtnCount = document.getElementById('submitBtnCount');
        const progressText = document.getElementById('progressText');
        const addSelectedBtn = document.getElementById('addSelectedQuestionsBtn');
        const autoSelectBtn = document.getElementById('autoSelectBtn');
        const autoCompleteBtn = document.getElementById('autoCompleteBtn');
        const clearAllBtn = document.getElementById('clearAllBtn');
        const questionCheckboxes = document.querySelectorAll('.question-checkbox');
        const selectAllCategoryBtns = document.querySelectorAll('.select-all-category-btn');
        const difficultyFilters = document.querySelectorAll('.difficulty-filter');
        const categoryFiltersContainer = document.getElementById('categoryFilters');
        const allQuestionCards = document.querySelectorAll('.question-card');
        let currentPreviewQuestionId = null;
        
        // Populate category filters
        const categories = Array.from(document.querySelectorAll('.category-section')).map(section => 
            section.getAttribute('data-category')
        );
        
        categories.forEach(category => {
            const categoryFilter = document.createElement('div');
            categoryFilter.className = 'form-check';
            categoryFilter.innerHTML = `
                <input class="form-check-input category-filter" type="checkbox" id="category_filter_${category.replace(/\s+/g, '_')}" value="${category}" checked>
                <label class="form-check-label" for="category_filter_${category.replace(/\s+/g, '_')}">${category}</label>
            `;
            categoryFiltersContainer.appendChild(categoryFilter);
        });
        
        const categoryFilters = document.querySelectorAll('.category-filter');
        
        // Initialize selection count
        updateSelectionCount();
        
        // Question checkbox change handler
        questionCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                updateQuestionCardStyle(this);
                updateSelectionCount();
            });
        });
        
        // Select All Category button handler
        selectAllCategoryBtns.forEach(button => {
            button.addEventListener('click', function() {
                const category = this.getAttribute('data-category');
                const categoryQuestionCheckboxes = document.querySelectorAll(`.question-card[data-category="${category}"]:not(.hidden) .question-checkbox`);
                
                // Check if any are currently checked
                const anyChecked = Array.from(categoryQuestionCheckboxes).some(checkbox => checkbox.checked);
                
                // Toggle all checkboxes in this category
                categoryQuestionCheckboxes.forEach(checkbox => {
                    checkbox.checked = !anyChecked;
                    updateQuestionCardStyle(checkbox);
                });
                
                updateSelectionCount();
            });
        });
        
        // Auto-select button handler (clears all and selects required amount)
        autoSelectBtn.addEventListener('click', function() {
            // First clear all selections
            questionCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
                updateQuestionCardStyle(checkbox);
            });
            
            // Get all visible questions from all categories (respect filters)
            const visibleQuestions = Array.from(allQuestionCards)
                .filter(card => !card.classList.contains('hidden'))
                .map(card => card.querySelector('.question-checkbox'));
            
            // Only select exactly the required number
            if (visibleQuestions.length >= requiredCount) {
                // Shuffle array to randomize selection across all categories
                const shuffled = visibleQuestions.sort(() => 0.5 - Math.random());
                
                // Select exactly the required number
                shuffled.slice(0, requiredCount).forEach(checkbox => {
                    checkbox.checked = true;
                    updateQuestionCardStyle(checkbox);
                });
            } else {
                // If not enough visible questions, select all visible and alert user
                visibleQuestions.forEach(checkbox => {
                    checkbox.checked = true;
                    updateQuestionCardStyle(checkbox);
                });
                
                alert(`Only ${visibleQuestions.length} questions are available with current filters. Please adjust filters to select ${requiredCount} questions.`);
            }
            
            updateSelectionCount();
        });
        
        // Auto-complete button handler (fills remaining selections without clearing existing ones)
        autoCompleteBtn.addEventListener('click', function() {
            // Calculate how many more questions we need to select
            const currentSelectedCount = document.querySelectorAll('.question-checkbox:checked').length;
            const remainingToSelect = requiredCount - currentSelectedCount;
            
            if (remainingToSelect <= 0) {
                alert(`You have already selected ${currentSelectedCount} questions. Required: ${requiredCount}`);
                return;
            }
            
            // Get all visible questions that are not yet selected from all categories
            const visibleUnselectedQuestions = Array.from(document.querySelectorAll('.question-card:not(.hidden) .question-checkbox'))
                .filter(qCheckbox => !qCheckbox.checked);
            
            // Only select the exact number we need
            if (visibleUnselectedQuestions.length >= remainingToSelect) {
                // Shuffle array to randomize selection across categories
                const shuffled = visibleUnselectedQuestions.sort(() => 0.5 - Math.random());
                
                // Select exactly the required number
                shuffled.slice(0, remainingToSelect).forEach(qCheckbox => {
                    qCheckbox.checked = true;
                    updateQuestionCardStyle(qCheckbox);
                });
                
                alert(`Successfully selected ${remainingToSelect} more questions to complete your requirement.`);
            } else if (visibleUnselectedQuestions.length > 0) {
                // Select all remaining visible questions if less than required
                visibleUnselectedQuestions.forEach(qCheckbox => {
                    qCheckbox.checked = true;
                    updateQuestionCardStyle(qCheckbox);
                });
                
                alert(`Selected all ${visibleUnselectedQuestions.length} remaining visible questions. Still need ${remainingToSelect - visibleUnselectedQuestions.length} more. Please adjust filters to see more questions.`);
            } else {
                alert('No more questions available with current filters. Please adjust filters to see more questions.');
            }
            
            updateSelectionCount();
        });
        
        // Clear all selections button handler
        clearAllBtn.addEventListener('click', function() {
            questionCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
                updateQuestionCardStyle(checkbox);
            });
            
            updateSelectionCount();
        });
        
        // Category filter handler
        categoryFilters.forEach(filter => {
            filter.addEventListener('change', function() {
                applyFilters();
            });
        });
        
        // Difficulty filter handler
        difficultyFilters.forEach(filter => {
            filter.addEventListener('change', function() {
                applyFilters();
            });
        });
        
        // Preview button handler
        document.querySelectorAll('.preview-btn').forEach(button => {
            button.addEventListener('click', function() {
                const questionId = this.getAttribute('data-question-id');
                currentPreviewQuestionId = questionId;
                
                const questionCard = this.closest('.question-card');
                const title = questionCard.querySelector('.question-title').textContent;
                
                // Populate modal with question details
                document.getElementById('previewModalLabel').textContent = title;
                document.getElementById('previewModalBody').innerHTML = `
                    <div class="alert alert-info">This is a preview of the full question. In a real implementation, this would show all question details.</div>
                    <h4>${title}</h4>
                    <p><strong>Difficulty:</strong> ${questionCard.getAttribute('data-difficulty')}</p>
                    <p><strong>Category:</strong> ${questionCard.getAttribute('data-category')}</p>
                    <p><strong>Description:</strong> ${questionCard.querySelector('.question-description').textContent}</p>
                `;
                
                // Update the select button state
                const checkbox = document.getElementById(`question_${questionId}`);
                const selectBtn = document.getElementById('selectFromPreviewBtn');
                selectBtn.textContent = checkbox.checked ? 'Unselect Question' : 'Select Question';
            });
        });
        
        // Select from preview button handler
        document.getElementById('selectFromPreviewBtn').addEventListener('click', function() {
            if (currentPreviewQuestionId) {
                const checkbox = document.getElementById(`question_${currentPreviewQuestionId}`);
                
                // Toggle selection
                checkbox.checked = !checkbox.checked;
                checkbox.dispatchEvent(new Event('change'));
                
                // Update button text
                this.textContent = checkbox.checked ? 'Unselect Question' : 'Select Question';
            }
        });
        
        // Helper functions
        function updateSelectionCount() {
            const selectedCount = document.querySelectorAll('.question-checkbox:checked').length;
            selectedCountEl.textContent = selectedCount;
            submitBtnCount.textContent = selectedCount;
            progressText.textContent = `${selectedCount} of ${requiredCount} questions selected`;
            
            // Update submit button state
            if (selectedCount === 0) {
                addSelectedBtn.disabled = true;
                addSelectedBtn.textContent = 'Select Questions First';
            } else {
                addSelectedBtn.disabled = false;
                addSelectedBtn.innerHTML = `Add ${selectedCount} Selected Question${selectedCount !== 1 ? 's' : ''}`;
            }
        }
        
        function updateQuestionCardStyle(checkbox) {
            const card = checkbox.closest('.question-card');
            if (checkbox.checked) {
                card.classList.add('selected');
            } else {
                card.classList.remove('selected');
            }
        }
        
        function applyFilters() {
            // Get selected categories
            const selectedCategories = Array.from(categoryFilters)
                .filter(filter => filter.checked)
                .map(filter => filter.value);
            
            // Get selected difficulty levels
            const selectedDifficulties = Array.from(difficultyFilters)
                .filter(filter => filter.checked)
                .map(filter => filter.value);
            
            // Show/hide questions based on filters
            allQuestionCards.forEach(card => {
                const category = card.getAttribute('data-category');
                const difficulty = card.getAttribute('data-difficulty');
                
                if (selectedCategories.includes(category) && selectedDifficulties.includes(difficulty)) {
                    card.classList.remove('hidden');
                    card.style.display = '';
                } else {
                    card.classList.add('hidden');
                    card.style.display = 'none';
                }
            });
            
            // Show/hide category sections based on whether they have visible questions
            document.querySelectorAll('.category-section').forEach(section => {
                const category = section.getAttribute('data-category');
                
                if (selectedCategories.includes(category)) {
                    const visibleQuestions = section.querySelectorAll('.question-card:not(.hidden)');
                    if (visibleQuestions.length > 0) {
                        section.style.display = '';
                    } else {
                        section.style.display = 'none';
                    }
                } else {
                    section.style.display = 'none';
                }
            });
        }
        
        // Initial filter application
        applyFilters();
        
        // Initial submit button state
        updateSelectionCount();
    });
</script>

</body>
</html>