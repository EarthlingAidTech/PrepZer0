
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="css/style.css">
   <style>
        /* Base Styles */
        :root {
            --primary: #4361ee;
            --primary-light: #e8ecfd;
            --primary-dark: #3344c7;
            --secondary: #2b2d42;
            --success: #2dc653;
            --danger: #ef476f;
            --warning: #ffd166;
            --info: #00b4d8;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #8d99ae;
            --white: #ffffff;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --border-radius: 12px;
            --card-shadow: 0 8px 24px rgba(149, 157, 165, 0.15);
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7fb;
            color: var(--secondary);
            overflow-x: hidden;
            position: relative;
            min-height: 100vh;
        }

        /* Hidden Elements */
        video, canvas {
            display: none;
        }

        /* Container Styles */
        .custom-container {
            max-width: 1440px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Header Styles */
        .exam-header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: var(--white);
            padding: 2.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .exam-header::before {
            content: "";
            position: absolute;
            top: -20px;
            right: -20px;
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
        }

        .exam-header::after {
            content: "";
            position: absolute;
            bottom: -30px;
            left: -30px;
            width: 160px;
            height: 160px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.05);
        }

        .exam-header h1 {
            font-weight: 700;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 5;
        }

        .exam-header p {
            font-weight: 300;
            font-size: 1.25rem;
            position: relative;
            z-index: 5;
            opacity: 0.9;
        }

        /* Start Button */
        .start-button {
            text-align: center;
            margin: 3rem 0;
        }

        .btn-start {
            background: var(--primary);
            color: var(--white);
            padding: 1rem 3rem;
            font-size: 1.25rem;
            font-weight: 600;
            border-radius: 50px;
            border: none;
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-start:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(67, 97, 238, 0.4);
        }

        .btn-start:active {
            transform: translateY(0);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.3);
        }

        .btn-start:before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .btn-start:hover:before {
            left: 100%;
        }

        /* Timer Styles */
        .exam-timer {
            background: var(--secondary);
            color: var(--white);
            padding: 1.25rem;
            border-radius: var(--border-radius);
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
            font-weight: 600;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .exam-timer i {
            margin-right: 0.75rem;
            color: var(--warning);
        }

        /* Sidebar Styles */
        .sidebar-container {
            position: sticky;
            top: 1.5rem;
        }

        .question-sidebar {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            height: calc(100vh - 200px);
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--gray) var(--light);
        }

        .question-sidebar::-webkit-scrollbar {
            width: 6px;
        }

        .question-sidebar::-webkit-scrollbar-track {
            background: var(--light);
            border-radius: 10px;
        }

        .question-sidebar::-webkit-scrollbar-thumb {
            background-color: var(--gray);
            border-radius: 10px;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .sidebar-header i {
            margin-right: 0.75rem;
            color: var(--primary);
            font-size: 1.25rem;
        }

        .sidebar-header h4 {
            margin-bottom: 0;
            font-weight: 600;
            font-size: 1.25rem;
        }

        .question-nav-item {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.2s;
            color: var(--secondary);
            text-decoration: none;
            font-weight: 500;
            border: 1px solid transparent;
        }

        .question-nav-item:hover {
            background-color: var(--primary-light);
            text-decoration: none;
            color: var(--primary);
        }

        .question-nav-item.active {
            background-color: var(--primary);
            color: var(--white);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.25);
        }

        .question-nav-item.answered {
            border-left: 4px solid var(--success);
            background-color: rgba(45, 198, 83, 0.08);
        }

        .question-indicator {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--light);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 0.875rem;
            font-weight: 600;
            transition: all 0.2s;
        }

        .question-nav-item.active .question-indicator {
            background-color: var(--white);
            color: var(--primary);
        }

        .question-nav-item.answered .question-indicator {
            background-color: var(--success);
            color: var(--white);
        }

        .question-type {
            font-size: 0.75rem;
            opacity: 0.8;
            margin-top: 0.25rem;
        }

        /* Question Card Styles */
        .question-card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 2rem;
            margin-bottom: 2rem;
            min-height: calc(100vh - 250px);
            display: none;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .question-card.active {
            display: block;
        }

        .question-status {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .question-number {
            font-size: 1rem;
            font-weight: 500;
            color: var(--gray);
        }

        .question-type-badge {
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
        }

        .question-type-badge i {
            margin-right: 0.5rem;
        }

        .mcq-badge {
            background-color: rgba(0, 180, 216, 0.15);
            color: var(--info);
        }

        .coding-badge {
            background-color: rgba(255, 209, 102, 0.15);
            color: #ff9800;
        }

        .question-text {
            font-size: 1.25rem;
            line-height: 1.6;
            margin-bottom: 2rem;
            font-weight: 500;
            color: var(--secondary);
        }

        /* Option Styles */
        .options {
            margin-top: 1.5rem;
        }

        .option-label {
            display: block;
            position: relative;
            padding: 1.25rem 1.5rem;
            margin: 1rem 0;
            background-color: var(--light);
            border-radius: var(--border-radius);
            transition: all 0.2s;
            font-size: 1rem;
            cursor: pointer;
            border-left: 4px solid transparent;
        }

        .option-label:hover {
            background-color: rgba(141, 153, 174, 0.1);
            transform: translateX(5px);
        }

        .option-label.selected {
            background-color: var(--primary-light);
            border-left: 4px solid var(--primary);
            box-shadow: 0 3px 10px rgba(67, 97, 238, 0.1);
        }

        .option-label input[type="radio"] {
            margin-right: 0.75rem;
            transform: scale(1.2);
            cursor: pointer;
        }

        /* Coding Area Styles */
        .coding-textarea {
            width: 100%;
            padding: 1.5rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: var(--border-radius);
            resize: vertical;
            min-height: 350px;
            font-family: 'Courier New', monospace;
            font-size: 1rem;
            line-height: 1.6;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: border 0.2s;
        }

        .coding-textarea:focus {
            outline: none;
            border: 1px solid var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        /* Navigation Button Styles */
        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .btn-nav {
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border-radius: 8px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
        }

        .btn-prev {
            background-color: var(--light);
            color: var(--secondary);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-prev:hover {
            background-color: var(--secondary);
            color: var(--white);
            border-color: var(--secondary);
        }

        .btn-prev i {
            margin-right: 0.5rem;
        }

        .btn-next {
            background-color: var(--primary);
            color: var(--white);
            border: none;
        }

        .btn-next:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.3);
        }

        .btn-next i {
            margin-left: 0.5rem;
        }

        /* Submit Button Styles */
        .submit-area {
            margin-top: 2rem;
            text-align: center;
            display: flex;
            justify-content: center;
        }

        .btn-review {
            padding: 0.75rem 2rem;
            font-size: 1rem;
            font-weight: 600;
            background-color: var(--info);
            color: var(--white);
            border: none;
            border-radius: 8px;
            margin-right: 1rem;
            display: flex;
            align-items: center;
            transition: all 0.2s;
        }

        .btn-review:hover {
            background-color: #0097b5;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 180, 216, 0.3);
        }

        .btn-review i {
            margin-right: 0.5rem;
        }

        .btn-submit {
            padding: 0.75rem 2.5rem;
            font-size: 1rem;
            font-weight: 600;
            background-color: var(--success);
            color: var(--white);
            border: none;
            border-radius: 8px;
            display: flex;
            align-items: center;
            transition: all 0.2s;
        }

        .btn-submit:hover {
            background-color: #26a645;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(45, 198, 83, 0.3);
        }

        .btn-submit i {
            margin-right: 0.5rem;
        }

        /* Modal Styles */
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .modal-header {
            background-color: var(--primary);
            color: var(--white);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            padding: 1.25rem 1.5rem;
        }

        .modal-header .close {
            color: var(--white);
            opacity: 0.8;
            text-shadow: none;
        }

        .modal-header .close:hover {
            opacity: 1;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .review-summary {
            margin-bottom: 1.5rem;
        }

        .review-alert {
            background-color: var(--primary-light);
            color: var(--primary);
            border: none;
            border-left: 4px solid var(--primary);
            border-radius: 8px;
            padding: 1rem 1.25rem;
        }

        .list-group-item {
            padding: 1rem 1.25rem;
            margin-bottom: 0.5rem;
            border-radius: 8px !important;
            border: 1px solid rgba(0, 0, 0, 0.05);
            transition: all 0.2s;
        }

        .list-group-item:hover {
            background-color: var(--light);
            transform: translateX(5px);
        }

        .status-badge {
            padding: 0.4rem 0.75rem;
            border-radius: 50px;
            font-weight: 500;
            font-size: 0.75rem;
        }

        .badge-not-answered {
            background-color: var(--gray);
            color: var(--white);
        }

        .badge-answered {
            background-color: var(--success);
            color: var(--white);
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
        }

        /* Integrity Panel Styles */
        .integrity-panel {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 2rem;
            margin: 3rem 0;
        }

        .integrity-panel h4 {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            font-weight: 600;
        }

        .integrity-panel h4 i {
            margin-right: 0.75rem;
            color: var(--primary);
        }

        .integrity-item {
            padding: 1rem 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .integrity-item:last-child {
            border-bottom: none;
        }

        .integrity-item strong {
            display: flex;
            align-items: center;
        }

        .integrity-item strong i {
            margin-right: 0.75rem;
            opacity: 0.7;
        }

        .integrity-item .badge {
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-weight: 500;
        }

        .total-violations {
            background-color: rgba(239, 71, 111, 0.1);
            border-radius: var(--border-radius);
            padding: 1rem 1.5rem;
            margin: 1.5rem 0;
            color: var(--danger);
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .total-violations i {
            margin-right: 0.75rem;
        }

        /* Footer Styles */
        .footer {
            text-align: center;
            padding: 2rem 0;
            color: var(--gray);
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            margin-top: 3rem;
        }

        .footer p {
            margin-bottom: 0;
        }

        /* Responsive Styles */
        @media (max-width: 991px) {
            .custom-container {
                padding: 1.5rem;
            }
            
            .exam-header {
                padding: 2rem;
            }
        }

        @media (max-width: 768px) {
            .question-sidebar {
                height: auto;
                max-height: 300px;
                margin-bottom: 1.5rem;
            }
            
            .btn-start {
                padding: 0.85rem 2rem;
                font-size: 1.1rem;
            }
            
            .question-card {
                padding: 1.5rem;
            }
            
            .options {
                margin-top: 1rem;
            }
            
            .option-label {
                padding: 1rem 1.25rem;
            }
            
            .question-text {
                font-size: 1.1rem;
            }
            
            .navigation-buttons {
                flex-wrap: wrap;
            }
            
            .navigation-buttons .btn {
                margin: 0.25rem;
                flex: 1;
                min-width: 120px;
            }
            
            .submit-area {
                flex-direction: column;
            }
            
            .btn-review {
                margin-right: 0;
                margin-bottom: 1rem;
                width: 100%;
                justify-content: center;
            }
            
            .btn-submit {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    <title><%= exam.name %> - Test</title>
</head>
<body>
    <div class="container-fluid">
        <div class="start-button">
            <button id="startExamBtn" class="btn btn-primary btn-lg px-5">Start Exam</button>
        </div>

        <div id="examContent" style="display: none;">
            <form id="examForm" action="/dashboard/submit-test" method="POST">
                <input type="hidden" name="examId" value="<%= exam._id %>">
                <input type="hidden" name="userId" value="<%= user._id %>">

                
                <div class="row">
               
                    <div class="col-md-3 col-lg-2">
                        <div class="exam-timer" id="examTimer">
                            Time: <span id="timeDisplay">00:00:00</span>
                        </div>
                        <div class="question-sidebar">
                            <h4 class="mb-4">Questions</h4>
                            <div id="questionNavList">
                                <% let totalQuestions = exam.mcqQuestions.length + exam.codingQuestions.length; %>
                                <% for(let i = 0; i < exam.mcqQuestions.length; i++) { %>
                                    <a href="#" class="question-nav-item <%= i === 0 ? 'active' : '' %>" data-question-index="<%= i %>" data-question-type="mcq">
                                        <div class="question-indicator"><%= i + 1 %></div>
                                        <div>MCQ <%= i + 1 %></div>
                                    </a>
                                <% } %>
                                <% for(let i = 0; i < exam.codingQuestions.length; i++) { %>
                                    <a href="#" class="question-nav-item" data-question-index="<%= i %>" data-question-type="coding">
                                        <div class="question-indicator"><%= i + 1 + exam.mcqQuestions.length %></div>
                                        <div>Coding <%= i + 1 %></div>
                                    </a>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Right content area for questions -->
                    <div class="col-md-9 col-lg-10">
                        <!-- MCQ Questions -->
                        <% exam.mcqQuestions.forEach((question, index) => { %>
                            <div class="question-card <%= index === 0 ? 'active' : '' %>" id="mcq-question-<%= index %>">
                                <div class="question-status">
                                    <div>
                                        <span class="question-type-badge mcq-badge">Multiple Choice</span>
                                    </div>
                                    <div>
                                        Question <%= index + 1 %> of <%= totalQuestions %>
                                    </div>
                                </div>
                                <h4 class="question-text"><%= question.question %></h4>
                                <div class="options mt-4">
                                    <% question.options.forEach((option, idx) => { %>
                                        <label class="option-label" data-option-index="<%= idx %>">
                                            <input type="radio" name="mcq-<%= question._id %>" value="<%= option %>" class="mcq-option">
                                            <span class="ml-2"><%= option %></span>
                                        </label>
                                    <% }); %>
                                </div>
                                <div class="navigation-buttons">
                                    <button type="button" class="btn btn-outline-secondary prev-question-btn" <%= index === 0 ? 'disabled' : '' %>>Previous</button>
                                    <button type="button" class="btn btn-primary next-question-btn">Next</button>
                                </div>
                            </div>
                        <% }); %>

                        <!-- Coding Questions -->
                        <% exam.codingQuestions.forEach((question, index) => { %>
                            <div class="question-card" id="coding-question-<%= index %>">
                                <!-- <div class="question-status">
                                    <div>
                                        <span class="question-type-badge coding-badge">Coding</span>
                                    </div>
                                    <div>
                                        Question <%= index + 1 + exam.mcqQuestions.length %> of <%= totalQuestions %>
                                    </div>
                                </div>
                                <h4 class="question-text"><%= question.question %></h4>
                                <textarea name="coding-<%= question._id %>" class="coding-textarea mt-4" rows="12" placeholder="Write your code here..."></textarea>
                                <div class="navigation-buttons">
                                    <button type="button" class="btn btn-outline-secondary prev-question-btn">Previous</button>
                                    <button type="button" class="btn btn-primary next-question-btn" <%= index === exam.codingQuestions.length - 1 ? 'disabled' : '' %>>Next</button>
                                </div> -->
                                <%- include('partials/hack') %>
                            </div>
                        <% }); %>
                        

                        <div class="submit-btn">
                            <button type="button" id="reviewBtn" class="btn btn-info btn-lg px-4 mr-2">Review Answers</button>
                            <button type="submit" id="submitTestBtn" class="btn btn-success btn-lg px-5">Submit Test</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-labelledby="reviewModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reviewModalLabel">Review Your Answers</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="review-summary mb-4">
                            <div class="alert alert-info">
                                <strong>Summary:</strong> <span id="answeredCount">0</span> of <span id="totalQuestionsCount"><%= totalQuestions %></span> questions answered
                            </div>
                        </div>
                        <div class="review-list">
                            <h6 class="mb-3">MCQ Questions:</h6>
                            <ul class="list-group mb-4">
                                <% exam.mcqQuestions.forEach((question, index) => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-question-type="mcq" data-question-index="<%= index %>">
                                        <div>Q<%= index + 1 %>: <%= question.question %>...</div>
                                        <span class="badge badge-secondary status-badge">Not answered</span>
                                    </li>
                                <% }); %>
                            </ul>
                            
                            <h6 class="mb-3">Coding Questions:</h6>
                            <ul class="list-group">
                                <% exam.codingQuestions.forEach((question, index) => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-question-type="coding" data-question-index="<%= index %>">
                                        <div>Q<%= index + 1 + exam.mcqQuestions.length %>: <%= question.question %>...</div>
                                        <span class="badge badge-secondary status-badge">Not answered</span>
                                    </li>
                                <% }); %>
                            </ul>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" id="submitFromReview">Submit Test</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="examin" class="integrity-panel mt-5">
            <h4 class="mb-4">Exam Integrity Monitor</h4>
            <div class="row">
                <div class="col-md-6">
                    <div class="integrity-item">
                        <strong>Tab Changes Detected:</strong> <span id="tabChangeCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Mouse Left Workspace:</strong> <span id="mouseOutCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Fullscreen Exit Attempts:</strong> <span id="fullscreenExitCount" class="badge badge-secondary">0</span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="integrity-item">
                        <strong>Copy Attempts:</strong> <span id="copyAttemptCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Paste Attempts:</strong> <span id="pasteAttemptCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Focus Changes Detected:</strong> <span id="focusChangeCount" class="badge badge-secondary">0</span>
                    </div>
                </div>
            </div>
            <div class="integrity-item mt-3 total-violations">
                <strong>Total Integrity Violations:</strong> <span id="totalViolations" class="badge badge-danger">0</span>
            </div>
            <div class="integrity-item">
                <strong>Last Event:</strong> <span id="lastEvent" class="badge badge-info">N/A</span>
            </div>
            <div class="integrity-item">
                <strong>Screen Configuration:</strong> <span id="screenConfig" class="badge badge-info">Checking...</span>
            </div>
        </div>

        <footer class="footer text-center">
            <p>© 2025 Earthling Aid Tech | Academic Assessment Platform</p>
        </footer>
    </div>

    <canvas id="canvas" width="320" height="240"></canvas>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>



<script >

let currentQuestionType = "mcq";
let currentQuestionIndex = 0;
let examTimerInterval = null;

// Variables for timer functionality
let endTime = null;
let examDuration = parseInt("<%= exam.duration %>") * 60 * 1000; // Convert minutes to milliseconds
let scheduledAt = new Date("<%=exam.scheduledAt %>").getTime();
let scheduleTill = new Date("<%= exam.scheduleTill %>").getTime();
let timeRemaining = examDuration;

// Question tracking
let answeredQuestions = {
    mcq: Array(<%= exam.mcqQuestions.length %>).fill(false),
    coding: Array(<%= exam.codingQuestions.length %>).fill(false)
};
// intrigrity code is here that i have not given but its here


//     // Integrity monitoring variables
let tabChangeCount = 0;
let mouseOutCount = 0;
let fullscreenExitCount = 0;
let copyAttemptCount = 0;
let pasteAttemptCount = 0;
let focusChangeCount = 0;
let refreshViolationCount = 0;
let isFullscreenActive = false;
let totalViolations = 0;
let lastTabFocusTime = 0;
const TAB_FOCUS_COOLDOWN = 1000;
const MAX_ALLOWED_REFRESHES = 2; 
let resizeAttempts = 0;
let lastResizeTime = 0;
const RESIZE_COOLDOWN = 500; 
const MAX_RESIZE_ATTEMPTS = 2;

// Add refreshViolationCount to the updateUI function
function updateUI() {
    if (localStorage.getItem('examStarted')=="true"){
    document.getElementById('tabChangeCount').textContent = tabChangeCount;
    document.getElementById('mouseOutCount').textContent = mouseOutCount;
    document.getElementById('fullscreenExitCount').textContent = fullscreenExitCount;
    document.getElementById('copyAttemptCount').textContent = copyAttemptCount;
    document.getElementById('pasteAttemptCount').textContent = pasteAttemptCount;
    document.getElementById('focusChangeCount').textContent = focusChangeCount;
    document.getElementById('refreshViolationCount').textContent = refreshViolationCount; // Add this line
    document.getElementById('totalViolations').textContent = totalViolations;
    }
}
function showViolationModal() {
    // Create modal container
    const modalOverlay = document.createElement('div');
    modalOverlay.style.position = 'fixed';
    modalOverlay.style.top = '0';
    modalOverlay.style.left = '0';
    modalOverlay.style.width = '100%';
    modalOverlay.style.height = '100%';
    modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    modalOverlay.style.display = 'flex';
    modalOverlay.style.justifyContent = 'center';
    modalOverlay.style.alignItems = 'center';
    modalOverlay.style.zIndex = '10000';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.backgroundColor = '#fff';
    modalContent.style.padding = '25px';
    modalContent.style.borderRadius = '10px';
    modalContent.style.maxWidth = '500px';
    modalContent.style.width = '80%';
    modalContent.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';
    modalContent.style.textAlign = 'center';
    
    // Add warning icon
    const warningIcon = document.createElement('div');
    warningIcon.innerHTML = '⚠️';
    warningIcon.style.fontSize = '4rem';
    warningIcon.style.marginBottom = '15px';
    modalContent.appendChild(warningIcon);
    
    // Add title
    const title = document.createElement('h2');
    title.textContent = 'Critical Violation Alert';
    title.style.color = '#d9534f';
    title.style.marginBottom = '15px';
    modalContent.appendChild(title);
    
    // Add message
    const message = document.createElement('p');
    message.textContent = `You have committed 3 or more integrity violations. Your exam will be automatically submitted.`;
    message.style.marginBottom = '20px';
    message.style.fontSize = '1.1rem';
    modalContent.appendChild(message);
    
    // Add violations list
    const violationsList = document.createElement('div');
    violationsList.style.textAlign = 'left';
    violationsList.style.marginBottom = '20px';
    violationsList.style.padding = '10px';
    violationsList.style.backgroundColor = '#f8d7da';
    violationsList.style.borderRadius = '5px';
    
    let violationsHTML = '<strong>Violations detected:</strong><ul style="margin-top: 10px;">';
    
    // Add each violation type with count
    if (tabChangeCount > 0) violationsHTML += `<li>Tab changes: ${tabChangeCount}</li>`;
    if (mouseOutCount > 0) violationsHTML += `<li>Mouse left window: ${mouseOutCount}</li>`;
    if (fullscreenExitCount > 0) violationsHTML += `<li>Fullscreen exits: ${fullscreenExitCount}</li>`;
    if (copyAttemptCount > 0) violationsHTML += `<li>Copy attempts: ${copyAttemptCount}</li>`;
    if (pasteAttemptCount > 0) violationsHTML += `<li>Paste attempts: ${pasteAttemptCount}</li>`;
    if (focusChangeCount > 0) violationsHTML += `<li>Focus changes: ${focusChangeCount}</li>`;
    if (refreshViolationCount > 0) violationsHTML += `<li>Page refreshes: ${refreshViolationCount}</li>`;
    
    violationsHTML += '</ul>';
    violationsList.innerHTML = violationsHTML;
    modalContent.appendChild(violationsList);
    
    // Add countdown text
    const countdown = document.createElement('p');
    countdown.textContent = 'Submitting exam in 5 seconds...';
    countdown.style.fontWeight = 'bold';
    modalContent.appendChild(countdown);
    
    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);
    
    // Start countdown
    let seconds = 5;
    const countdownInterval = setInterval(() => {
        seconds--;
        countdown.textContent = `Submitting exam in ${seconds} second${seconds !== 1 ? 's' : ''}...`;
        
        if (seconds <= 0) {
            clearInterval(countdownInterval);
        }
    }, 1000);
    
    return modalOverlay;
}
function showNotification(message, type = 'warning') {
    // Create notification container if it doesn't exist
    let notificationContainer = document.getElementById('notificationContainer');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.id = 'notificationContainer';
        notificationContainer.style.position = 'fixed';
        notificationContainer.style.top = '10px';
        notificationContainer.style.right = '10px';
        notificationContainer.style.zIndex = '9999';
        document.body.appendChild(notificationContainer);
    }
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.backgroundColor = type === 'warning' ? '#fff3cd' : '#f8d7da';
    notification.style.color = type === 'warning' ? '#856404' : '#721c24';
    notification.style.padding = '10px 15px';
    notification.style.marginBottom = '10px';
    notification.style.borderRadius = '4px';
    notification.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
    notification.style.width = '300px';
    notification.style.animation = 'fadeIn 0.3s ease-out';
    notification.innerHTML = message;
    
    // Add to container
    notificationContainer.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        notification.style.animation = 'fadeOut 0.3s ease-in';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 8000);
    
    return notification;
}

window.addEventListener('resize', () => {
    if (localStorage.getItem('examStarted') == "true") {
        const currentTime = Date.now();
        // Check if we're within the cooldown period
        if (currentTime - lastResizeTime < RESIZE_COOLDOWN) {
            // Count this as another attempt within the same period
            resizeAttempts++;
            
            // Check if max attempts exceeded
            if (resizeAttempts >= MAX_RESIZE_ATTEMPTS) {
                // Only show notification and count as violation if not due to Mac-specific events
                // like Mission Control or fullscreen transitions
                if (Math.abs(window.innerHeight - window.screen.height) > 100) {
                    showNotification(`DevTools detected! Your exam is being monitored.`, 'error');
                    
                    // Show the violation modal and submit exam after delay
                    const modalOverlay = showViolationModal();
                    setTimeout(() => {
                        submitExam("resize_violations");
                    }, 5000);
                }
            }
        } else {
            // First resize attempt in a new period
            resizeAttempts = 1;
            if(resizeAttempts > 1) {
                showNotification(`Window resize detected. This is being monitored.`);
            }
        }
        
        // Update the timestamp
        lastResizeTime = currentTime;
        
        // Check if total violations are too high
        checkAndSubmitTest();
    }
});



document.addEventListener('contextmenu', event => event.preventDefault());

const style = document.createElement('style');
style.textContent = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    @keyframes fadeOut {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(-20px); }
    }
`;
document.head.appendChild(style);
// Create a function to handle refresh detection
function handleRefreshDetection() {
    // Check if there's a saved refresh count
    let refreshCount = parseInt(localStorage.getItem('examRefreshCount') || '0');
    if(localStorage.getItem('examStarted') == "true"){
        refreshCount++;
        localStorage.setItem('examRefreshCount', refreshCount.toString());
    }
   
    
    // Count this as a violation if it's not the first load
    if (refreshCount > 1) {
        refreshViolationCount = refreshCount - 1; // Don't count the initial load
        totalViolations += 1; // Increment total violations by 1 for this refresh
        
        // Send refresh event to server for logging
        sendIntegrityUpdate("pageRefresh");
        updateStatus("Page refresh detected");
        updateUI();
        
        // Check if exceeded maximum allowed refreshes
        if (refreshCount > MAX_ALLOWED_REFRESHES) {
            showNotification(`Maximum page refreshes (${MAX_ALLOWED_REFRESHES}) exceeded. Your exam is being submitted.`, 'error');
            submitExam("excessive_refreshes");
            return false;
        }
    }
    
    return true;
}

// Modify the DOMContentLoaded event handler
document.addEventListener('DOMContentLoaded', function() {
    // Check if exam has started
    const examStarted = localStorage.getItem('examStarted');
    function sendActivityPing() {
        
        fetch('/dashboard/see-active', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                examId: document.querySelector('input[name="examId"]').value,  // Use the template variable
                userId: document.querySelector('input[name="userId"]').value,  // Use the template variable
                timestamp: new Date().toISOString()
            })
        })
        .then(response => {
            if (!response.ok) {
                console.error('Failed to send activity ping');
                
            }else{
                
            }
        })
        .catch(error => {
           
           
        });
    }
    
    // Send first ping immediately
    sendActivityPing();
    const pingInterval = setInterval(sendActivityPing, 20000);

    if (examStarted === 'true') {
        // Add refresh violation elements to the integrity panel
        const integrityCols = document.querySelectorAll('#examin .col-md-6');
        if (integrityCols.length > 1) {
            const refreshViolationItem = document.createElement('div');
            refreshViolationItem.className = 'integrity-item';
            refreshViolationItem.innerHTML = '<strong>Refresh Violations:</strong> <span id="refreshViolationCount" class="badge badge-secondary">0</span>';
            integrityCols[1].appendChild(refreshViolationItem);
        }
        
        // Handle refresh detection
        if (!handleRefreshDetection()) {
            return; // Stop if refresh limit exceeded
        }
        
        // Continue with normal exam loading
        document.getElementById("startExamBtn").style.display = "none";
        document.getElementById("examContent").style.display = "block";
        document.getElementById("examin").style.display = "block"; // Make sure the integrity panel is visible
        
        if (initializeExamTimer()) {
            loadExamState();
            enterFullscreen();
            preventBackButton();
            startWebcamCapture();
        } else {
            // If initialization failed, clear localStorage
            localStorage.removeItem('examStarted');
            localStorage.removeItem('examEndTime');
            localStorage.removeItem('examMcqAnswers');
            localStorage.removeItem('examCodingAnswers');
            localStorage.removeItem('examRefreshCount');
        }
    } else {
        // Add refresh violation element to the integrity panel for when exam starts
        const integrityCols = document.querySelectorAll('#examin .col-md-6');
        if (integrityCols.length > 1) {
            const refreshViolationItem = document.createElement('div');
            refreshViolationItem.className = 'integrity-item';
            refreshViolationItem.innerHTML = '<strong>Refresh Violations:</strong> <span id="refreshViolationCount" class="badge badge-secondary">0</span>';
            integrityCols[1].appendChild(refreshViolationItem);
        }
        
        // Reset refresh count when exam starts
        document.getElementById("startExamBtn").addEventListener("click", function() {
            enterFullscreen()
            localStorage.setItem('examRefreshCount', '0');
            // Rest of your existing start exam code...
        });
    }
    
    // Rest of your existing DOMContentLoaded code...
}); 

// Exam navigation variables

let maxAllowedRefreshes = 2; // Set your desired threshold
// Prevent F5 (refresh) and F11 (fullscreen toggle) keyboard shortcuts

// Add this to the DOMContentLoaded event listener

// Send integrity updates to server
function sendIntegrityUpdate(eventType) {
    if (localStorage.getItem('examStarted')=="true"){
        const data = {
        examId: document.querySelector('input[name="examId"]').value, 
        userId:document.querySelector('input[name="userId"]').value, 
        eventType: eventType
    };

    fetch('/update-integrity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => console.log('Integrity event logged:', data))
    .catch(error => console.error('Error sending integrity update:', error));
    }

}

// Update UI elements for integrity monitoring

// Update status message
function updateStatus(message) {
    if (localStorage.getItem('examStarted')=="true"){
    document.getElementById('lastEvent').textContent = message;
    }
}

// Handle tab change events
function handleTabChange() {
    if (localStorage.getItem('examStarted')=="true"){
    if (document.hidden) {
        // Only count tab change if it's not immediately after a focus change
        const currentTime = Date.now();
        if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
            tabChangeCount++;
            totalViolations++;
            sendIntegrityUpdate("tabChanges");
            updateStatus("Tab change detected");
            updateUI();
            checkAndSubmitTest();
        }
    }
}
}

// Handle mouse leaving the window
function handleMouseOut(event) {
    if (localStorage.getItem('examStarted')=="true"){
    if (event.clientX < 0 || event.clientX > window.innerWidth - 1 || event.clientY < 0 || event.clientY > window.innerHeight - 1) {
        mouseOutCount++;
        totalViolations++;
        sendIntegrityUpdate("mouseOuts");
        updateStatus("Mouse left workspace");
        showNotification("Mouse Going Out is not allowed");
        updateUI();
        checkAndSubmitTest();
    }
}
}

// Handle window focus changes
function handleFocusChange(event) {
    if (localStorage.getItem('examStarted')=="true"){
    if (event.type === 'blur') {
        // Only count focus change if it's not immediately after a tab change
        const currentTime = Date.now();
        if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
            focusChangeCount++;
            lastTabFocusTime = currentTime;
            
            // Check if this is coming from a tab change or standalone focus change
            if (!document.hidden) {
                // If document is not hidden, this is a standalone focus change
                totalViolations++;
                sendIntegrityUpdate("focusChanges");
                updateStatus("Focus change detected");
                updateUI();
                checkAndSubmitTest();
            }
        }
    }
}
}

function enterFullscreen() {
    const elem = document.documentElement;
    
    // Don't attempt to enter fullscreen if already in fullscreen mode
    if (document.fullscreenElement || document.webkitFullscreenElement || 
        document.mozFullScreenElement || document.msFullscreenElement) {
        return;
    }
    
    try {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.webkitRequestFullscreen) { // Safari
            elem.webkitRequestFullscreen();
        } else if (elem.mozRequestFullScreen) { // Firefox
            elem.mozRequestFullScreen();
        } else if (elem.msRequestFullscreen) { // IE/Edge
            elem.msRequestFullscreen();
        }
    } catch (error) {
        console.error("Fullscreen error:", error);
        showNotification("Fullscreen mode failed. Please try again.");
    }
}
// Update the fullscreenchange event listener to handle all browser prefixes
document.addEventListener('fullscreenchange', handleFullscreenChange);
document.addEventListener('webkitfullscreenchange', handleFullscreenChange); // Safari
document.addEventListener('mozfullscreenchange', handleFullscreenChange); // Firefox
document.addEventListener('MSFullscreenChange', handleFullscreenChange); // IE/Edge
document.addEventListener('visibilitychange', handleTabChange);
window.addEventListener('blur', handleFocusChange);
window.addEventListener('focus', handleFocusChange);
document.addEventListener('copy', (e) => {
    e.preventDefault();
    copyAttemptCount++;
    sendIntegrityUpdate("copyAttempts");
    updateStatus("Copy attempt detected");
    updateUI();
});

document.addEventListener('paste', (e) => {
    e.preventDefault();
    pasteAttemptCount++;
    sendIntegrityUpdate("pasteAttempts");
    updateStatus("Paste attempt detected");
    updateUI();
});

function handleFullscreenChange() {

    if (!document.fullscreenElement && !document.webkitFullscreenElement && 
        !document.mozFullScreenElement && !document.msFullscreenElement) {
        fullscreenExitCount++;
        totalViolations++;
        showNotification("Exiting fullscreen is not allowed during the exam.");
        
        // Give a short delay before forcing back to fullscreen (helps with Mac transition)
        setTimeout(enterFullscreen, 500);
        
        sendIntegrityUpdate("fullscreenExits");
        updateStatus("Fullscreen exited");
        updateUI();
        checkAndSubmitTest();
    } else {
        if (!isFullscreenActive) {
            document.addEventListener('mouseout', handleMouseOut);
            isFullscreenActive = true;
            setTimeout(() => {
                const btn = document.getElementById('myButton');
                if (btn) btn.click();
            }, 2000);
        }
        updateStatus("Fullscreen entered");
    }
}

function startWebcamCapture() {
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');
    
    // Check if media devices API is supported
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        console.error("MediaDevices API not supported");
        showNotification("Your browser doesn't support webcam capture. Please use a modern browser.", 'error');
        return;
    }

    navigator.mediaDevices.getUserMedia({ 
        video: { 
            width: { ideal: 320 },
            height: { ideal: 240 },
            facingMode: "user"
        } 
    })
    .then((stream) => {
        const video = document.createElement('video');
        video.srcObject = stream;
        video.play();
        
        // Wait for video to be ready
        video.onloadedmetadata = () => {
            // Set up snapshot interval
            setInterval(() => {
                try {
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);
                    
                    canvas.toBlob((blob) => {
                        if (!blob) return;
                        
                        const formData = new FormData();
                        formData.append('image', blob, `capture-${Date.now()}.png`);
                        formData.append('userId',document.querySelector('input[name="userId"]').value);
                        formData.append('examId', document.querySelector('input[name="examId"]').value);
                        
                        fetch('/save-image', { 
                            method: 'POST',
                            body: formData,
                        })
                        .then(response => response.json())
                        .then(data => console.log('Image saved:', data))
                        .catch(error => console.error('Error saving image:', error));
                    }, 'image/png');
                } catch (err) {
                    console.error("Error capturing webcam frame:", err);
                }
            }, 5000);
        };
    })
    .catch((error) => {
        console.error("Error accessing webcam:", error);
        showNotification("Unable to access the webcam. Please ensure your camera is connected and you've allowed permission.", 'error');
    });
}

function preventBackButton() {
    window.history.pushState(null, "", window.location.href);
    window.onpopstate = function() {
        window.history.pushState(null, "", window.location.href);
    };
}



// Auto-submit test if too many violations
function checkAndSubmitTest() {
    if (localStorage.getItem('examStarted')=="true"){
    if (totalViolations >= 3) {
        updateStatus("Auto-submitting test due to integrity violations");
        const modalOverlay = showViolationModal();
            
            // Set timeout to submit after 5 seconds
            setTimeout(() => {
                // Submit the exam after showing the modal for 5 seconds
                submitExam();
            }, 5000);
        console.log("Auto-submitting test due to 3 or more integrity violations");
        
    }
}
}

// Submit exam with reason
function submitExam(reason = "normal") {
    // Set a flag to prevent refresh detection during submission
    localStorage.setItem('examSubmitting', 'true');
    
    clearInterval(examTimerInterval);
    console.log(`Submitting exam: ${reason}`);
    localStorage.setItem('examStarted', 'false');
    // Clear all localStorage items first
    localStorage.removeItem('examStarted');
    localStorage.removeItem('examEndTime');
    localStorage.removeItem('examMcqAnswers');
    localStorage.removeItem('examCodingAnswers');
    localStorage.removeItem('examRefreshCount');
    
    // Submit the form
    document.getElementById('examForm').submit();
    
    // Use a small timeout before redirect to allow form submission to complete
    setTimeout(() => {
        window.location.href = '/dashboard';
    }, 1000);
}
document.addEventListener('click', () => {
    if (!document.fullscreenElement && examTimerInterval) {
        enterFullscreen();
        updateStatus("Fullscreen mode ensured after click");
    }
});
function updateScreenConfiguration() {
  // Get the screen configuration element
  const screenConfigElement = document.getElementById('screenConfig');
  
  // If the element doesn't exist, return
  if (!screenConfigElement) {
    console.error('Screen configuration element not found');
    return;
  }
  
  // Set a loading message
  screenConfigElement.textContent = 'Detecting screen configuration...';
  
  // Setup timeout to handle case where configuration can't be detected
  const timeout = setTimeout(() => {
    screenConfigElement.textContent = 'Screen configuration unavailable';
  }, 2000);
  
  // Get and display the screen configuration
  try {
    // Get window dimensions
    const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    
    // Get screen dimensions
    const screenWidth = window.screen.width;
    const screenHeight = window.screen.height;
    
    // Get device pixel ratio for detecting high-DPI displays
    const pixelRatio = window.devicePixelRatio || 1;
    
    // Get color depth
    const colorDepth = window.screen.colorDepth;
    
    // Clear the timeout since we got the data
    clearTimeout(timeout);
    
    // Format and display the configuration
    const configText = `${width}x${height} (Window), ${screenWidth}x${screenHeight} (Screen), ${pixelRatio}x (Pixel Ratio), ${colorDepth}-bit color`;
    screenConfigElement.textContent = configText;
    
    // Log the configuration for debugging
    console.log('Screen configuration:', configText);
    
    // Return the configuration in case it's needed elsewhere
    return {
      window: { width, height },
      screen: { width: screenWidth, height: screenHeight },
      pixelRatio,
      colorDepth
    };
  } catch (error) {
    // Clear the timeout and show error
    clearTimeout(timeout);
    console.error('Error detecting screen configuration:', error);
    screenConfigElement.textContent = 'Error detecting screen configuration';
  }
}



// Navigation functions
function showQuestion(type, index) {
    // Hide all question cards
    document.querySelectorAll('.question-card').forEach(card => {
        card.classList.remove('active');
    });
    
    // Show the selected question card
    document.getElementById(`${type}-question-${index}`).classList.add('active');
    
    // Update navigation sidebar
    document.querySelectorAll('.question-nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Find and activate the correct nav item
    document.querySelectorAll('.question-nav-item').forEach(item => {
        if (item.getAttribute('data-question-type') === type && 
            parseInt(item.getAttribute('data-question-index')) === index) {
            item.classList.add('active');
        }
    });
    
    // Update current question tracking
    currentQuestionType = type;
    currentQuestionIndex = index;
}

function nextQuestion() {
    if (currentQuestionType === "mcq" && currentQuestionIndex < <%= exam.mcqQuestions.length - 1 %>) {
        // Go to next MCQ
        showQuestion("mcq", currentQuestionIndex + 1);
    } else if (currentQuestionType === "mcq" && currentQuestionIndex === <%= exam.mcqQuestions.length - 1 %>) {
        // Switch from MCQ to coding if available
        if (<%= exam.codingQuestions.length %> > 0) {
            showQuestion("coding", 0);
        }
    } else if (currentQuestionType === "coding" && currentQuestionIndex < <%= exam.codingQuestions.length - 1 %>) {
        // Go to next coding question
        showQuestion("coding", currentQuestionIndex + 1);
    }
}

function prevQuestion() {
    if (currentQuestionType === "coding" && currentQuestionIndex > 0) {
        // Go to previous coding question
        showQuestion("coding", currentQuestionIndex - 1);
    } else if (currentQuestionType === "coding" && currentQuestionIndex === 0) {
        // Switch from coding to last MCQ
        showQuestion("mcq", <%= exam.mcqQuestions.length - 1 %>);
    } else if (currentQuestionType === "mcq" && currentQuestionIndex > 0) {
        // Go to previous MCQ
        showQuestion("mcq", currentQuestionIndex - 1);
    }
}

function updateAnsweredStatus() {
    // Count MCQ answers
    document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
        const questionId = radio.name.split('-')[1];
        const mcqIndex = Array.from(document.querySelectorAll('.question-card')).findIndex(
            card => card.querySelector(`input[name="mcq-${questionId}"]`)
        );
        
        if (mcqIndex !== -1) {
            answeredQuestions.mcq[mcqIndex] = true;
            
            // Update nav item
            document.querySelectorAll('.question-nav-item').forEach(item => {
                if (item.getAttribute('data-question-type') === 'mcq' && 
                    parseInt(item.getAttribute('data-question-index')) === mcqIndex) {
                    item.classList.add('answered');
                }
            });
        }
    });
    
    // Count coding answers
    document.querySelectorAll('textarea').forEach((textarea, index) => {
        if (textarea.value.trim() !== '') {
            answeredQuestions.coding[index] = true;
            
            // Update nav item
            document.querySelectorAll('.question-nav-item').forEach(item => {
                if (item.getAttribute('data-question-type') === 'coding' && 
                    parseInt(item.getAttribute('data-question-index')) === index) {
                    item.classList.add('answered');
                }
            });
        }
    });
    
    // Update review modal
    updateReviewModal();
    
    // Save answers state to localStorage
    saveExamState();
}

function updateReviewModal() {
    const answeredCount = answeredQuestions.mcq.filter(Boolean).length + 
                         answeredQuestions.coding.filter(Boolean).length;
    
    document.getElementById('answeredCount').textContent = answeredCount;
    
    // Update MCQ status in review modal
    answeredQuestions.mcq.forEach((isAnswered, index) => {
        const listItem = document.querySelector(`.review-list li[data-question-type="mcq"][data-question-index="${index}"]`);
        const statusBadge = listItem.querySelector('.status-badge');
        
        if (isAnswered) {
            statusBadge.textContent = "Answered";
            statusBadge.classList.remove('badge-secondary');
            statusBadge.classList.add('badge-success');
        } else {
            statusBadge.textContent = "Not answered";
            statusBadge.classList.remove('badge-success');
            statusBadge.classList.add('badge-secondary');
        }
    });
    
    // Update coding status in review modal
    answeredQuestions.coding.forEach((isAnswered, index) => {
        const listItem = document.querySelector(`.review-list li[data-question-type="coding"][data-question-index="${index}"]`);
        const statusBadge = listItem.querySelector('.status-badge');
        
        if (isAnswered) {
            statusBadge.textContent = "Answered";
            statusBadge.classList.remove('badge-secondary');
            statusBadge.classList.add('badge-success');
        } else {
            statusBadge.textContent = "Not answered";
            statusBadge.classList.remove('badge-success');
            statusBadge.classList.add('badge-secondary');
        }
    });
}

// Save exam state to localStorage (for page refresh handling)
function saveExamState() {
    // Save answers
    const mcqAnswers = {};
    document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
        mcqAnswers[radio.name] = radio.value;
    });
    
    const codingAnswers = {};
    document.querySelectorAll('textarea').forEach(textarea => {
        codingAnswers[textarea.name] = textarea.value;
    });
    
    localStorage.setItem('examMcqAnswers', JSON.stringify(mcqAnswers));
    localStorage.setItem('examCodingAnswers', JSON.stringify(codingAnswers));
}

// Load exam state from localStorage (after page refresh)
function loadExamState() {
    // Load MCQ answers
    try {
        const mcqAnswers = JSON.parse(localStorage.getItem('examMcqAnswers')) || {};
        Object.entries(mcqAnswers).forEach(([name, value]) => {
            const radioInput = document.querySelector(`input[name="${name}"][value="${value}"]`);
            if (radioInput) {
                radioInput.checked = true;
                radioInput.closest('.option-label').classList.add('selected');
            }
        });
        
        // Load coding answers
        const codingAnswers = JSON.parse(localStorage.getItem('examCodingAnswers')) || {};
        Object.entries(codingAnswers).forEach(([name, value]) => {
            const textarea = document.querySelector(`textarea[name="${name}"]`);
            if (textarea) {
                textarea.value = value;
            }
        });
        
        updateAnsweredStatus();
    } catch (e) {
        console.error("Error loading saved exam state:", e);
    }
}
// Handle page refresh or close attempt
window.addEventListener('beforeunload', function(e) {
    if (localStorage.getItem('examStarted')=="true"){
        clearInterval(pingInterval);
        
        // Send final ping with status=inactive
        fetch('/dashboard/see-active', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                examId: "<%= exam._id %>",
                userId: document.querySelector('input[name="userId"]').value,
                timestamp: new Date().toISOString(),
                status: 'inactive' // Optional: indicate user is leaving
            }),
            // Use keepalive to ensure the request completes even when page is unloading
            keepalive: true
        });
    if (localStorage.getItem('examSubmitting') === 'true') {
        return;
    }
    // Only set the returnValue to show a generic browser warning
    if (examTimerInterval) {
        // This triggers the browser's "Leave site?" dialog with a generic message
        e.preventDefault();
        e.returnValue = '';
        // Flag that we're about to refresh
        sessionStorage.setItem('attemptedRefresh', 'true');
        // Save current state
        saveExamState();   
        return '';
    }}
});
// Set up event listeners

// Question navigation event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Check if already started

    const examStarted = localStorage.getItem('examStarted');
    if (examStarted === 'true') {
        document.getElementById("startExamBtn").style.display = "none";

        document.getElementById("examin").style.display = "none";
        document.getElementById("examContent").style.display = "block";
        
        // Initialize exam timer and load previous state
        if (initializeExamTimer()) {
            loadExamState();
            enterFullscreen();
            preventBackButton();
            startWebcamCapture();
        } else {
            // If initialization failed, clear localStorage
            localStorage.removeItem('examStarted');
            localStorage.removeItem('examEndTime');
            localStorage.removeItem('examMcqAnswers');
            localStorage.removeItem('examCodingAnswers');
        }
    }

    // Next question buttons
    document.querySelectorAll('.next-question-btn').forEach(button => {
        button.addEventListener('click', function() {
            nextQuestion();
        });
    });
    
    // Previous question buttons
    document.querySelectorAll('.prev-question-btn').forEach(button => {
        button.addEventListener('click', function() {
            prevQuestion();
        });
    });
    
    // Question nav sidebar items
    document.querySelectorAll('.question-nav-item').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const type = this.getAttribute('data-question-type');
            const index = parseInt(this.getAttribute('data-question-index'));
            showQuestion(type, index);
        });
    });
    
    // MCQ option selection
    document.querySelectorAll('.option-label').forEach(label => {
        label.addEventListener('click', function() {
            // Clear selected state for all options in the same question
            const questionCard = this.closest('.question-card');
            questionCard.querySelectorAll('.option-label').forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // Apply selected state to this option
            this.classList.add('selected');
            
            // Update answered status
            updateAnsweredStatus();
        });
    });
    
    
    // Coding textarea input
    document.querySelectorAll('.coding-textarea').forEach(textarea => {
        textarea.addEventListener('input', function() {
            updateAnsweredStatus();
        });
    });
    
    // Review button
    document.getElementById('reviewBtn').addEventListener('click', function() {
        updateAnsweredStatus();
        $('#reviewModal').modal('show');
    });
    
    // Submit from review modal
    document.getElementById('submitFromReview').addEventListener('click', function() {
        $('#reviewModal').modal('hide');
        submitExam("manual");
    });
    // Submit test button
    document.getElementById('submitTestBtn').addEventListener('click', function() {
        submitExam("manual");
    });
    // Review modal question navigation
    document.querySelectorAll('.review-list li').forEach(item => {
        item.addEventListener('click', function() {
            const type = this.getAttribute('data-question-type');
            const index = parseInt(this.getAttribute('data-question-index'));
            $('#reviewModal').modal('hide');
            showQuestion(type, index);
        });
    });
});
document.getElementById("startExamBtn").addEventListener("click", function() {
    // Store exam started state
    localStorage.setItem('examStarted', 'true');
    
    enterFullscreen();
    document.getElementById("examin").style.display = "none";
    document.getElementById("examContent").style.display = "block"; 
    this.style.display = "none";
    
    if (initializeExamTimer()) {
        preventBackButton();
        startWebcamCapture();
    } else {
        // Revert if initialization failed
        document.getElementById("startExamBtn").style.display = "block";
        document.getElementById("startScreen").style.display = "none";
        document.getElementById("startScreen").hidden = true;
        document.getElementById("examContent").style.display = "none";
        localStorage.removeItem('examStarted');
    }
});

window.onload = () => {
    preventBackButton();
    updateScreenConfiguration();
    // Handle if the page is loaded after exam end time
    const savedEndTime = localStorage.getItem('examEndTime');
};
</script> 
</body>
</html>