<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="css/style.css">
    <title><%= exam.name %> - Test</title>
    <style>
        video, canvas {
            display: none;
        }
        body {
            background-color: #f5f5f5;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow-x: hidden;
        }
        .exam-header {
            background: linear-gradient(135deg, #343a40 0%, #212529 100%);
            color: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .start-button {
            text-align: center;
            margin: 30px 0;
        }
        .question-sidebar {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 15px;
            height: calc(100vh - 200px);
            position: sticky;
            top: 20px;
            overflow-y: auto;
        }
        .question-nav-item {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s;
            color: #212529;
            text-decoration: none;
        }
        .question-nav-item:hover {
            background-color: #e9ecef;
            text-decoration: none;
            color: #212529;
        }
        .question-nav-item.active {
            background-color: #007bff;
            color: white;
        }
        .question-nav-item.answered {
            border-left: 4px solid #28a745;
        }
        .question-indicator {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background-color: #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            font-size: 12px;
            font-weight: bold;
        }
        .question-nav-item.active .question-indicator {
            background-color: white;
            color: #007bff;
        }
        .question-nav-item.answered .question-indicator {
            background-color: #28a745;
            color: white;
        }
        .question-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
            min-height: calc(100vh - 280px);
            display: none;
        }
        .question-card.active {
            display: block;
        }
        .option-label {
            display: block;
            padding: 10px 15px;
            margin: 5px 0;
            background-color: #f8f9fa;
            border-radius: 5px;
            transition: background-color 0.2s;
        }
        .option-label:hover {
            background-color: #e9ecef;
        }
        .option-label.selected {
            background-color: #d1ecf1;
            border-left: 4px solid #17a2b8;
        }
        .coding-textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            resize: vertical;
            min-height: 200px;
        }
        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
        .submit-btn {
            margin-top: 20px;
            text-align: center;
        }
        .integrity-panel {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 30px;
        }
        .integrity-item {
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }
        .integrity-item:last-child {
            border-bottom: none;
        }
        .total-violations {
            font-weight: bold;
            color: #dc3545;
        }
        .footer {
            margin-top: 40px;
            padding: 20px 0;
            text-align: center;
            font-size: 0.9rem;
            color: #6c757d;
        }
        .exam-timer {
            background-color: #212529;
            color: white;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        .question-status {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }
        .question-type-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        .mcq-badge {
            background-color: #e6f7ff;
            color: #0070f3;
        }
        .coding-badge {
            background-color: #fff7e6;
            color: #fa8c16;
        }
        @media (max-width: 768px) {
            .question-sidebar {
                height: auto;
                max-height: 200px;
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <div class="exam-header text-center">
            <h1><%= exam.name %></h1>
            <p class="lead mb-0">Online Assessment</p>
        </div>

        <div class="start-button">
            <button id="startExamBtn" class="btn btn-primary btn-lg px-5">Start Exam</button>
        </div>

        <div id="examContent" style="display: none;">
            <form id="examForm" action="/dashboard/submit-test" method="POST">
                <input type="hidden" name="examId" value="<%= exam._id %>">
                
                <div class="row">
                    <!-- Left sidebar for question navigation -->
                    <div class="col-md-3">
                        <div class="exam-timer" id="examTimer">
                            Time: <span id="timeDisplay">00:00:00</span>
                        </div>
                        <div class="question-sidebar">
                            <h5 class="mb-3">Questions</h5>
                            <div id="questionNavList">
                                <% let totalQuestions = exam.mcqQuestions.length + exam.codingQuestions.length; %>
                                <% for(let i = 0; i < exam.mcqQuestions.length; i++) { %>
                                    <a href="#" class="question-nav-item <%= i === 0 ? 'active' : '' %>" data-question-index="<%= i %>" data-question-type="mcq">
                                        <div class="question-indicator"><%= i + 1 %></div>
                                        <div>MCQ <%= i + 1 %></div>
                                    </a>
                                <% } %>
                                <% for(let i = 0; i < exam.codingQuestions.length; i++) { %>
                                    <a href="#" class="question-nav-item" data-question-index="<%= i %>" data-question-type="coding">
                                        <div class="question-indicator"><%= i + 1 + exam.mcqQuestions.length %></div>
                                        <div>Coding <%= i + 1 %></div>
                                    </a>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Right content area for questions -->
                    <div class="col-md-9">
                        <!-- MCQ Questions -->
                        <% exam.mcqQuestions.forEach((question, index) => { %>
                            <div class="question-card <%= index === 0 ? 'active' : '' %>" id="mcq-question-<%= index %>">
                                <div class="question-status">
                                    <div>
                                        <span class="question-type-badge mcq-badge">Multiple Choice</span>
                                    </div>
                                    <div>
                                        Question <%= index + 1 %> of <%= totalQuestions %>
                                    </div>
                                </div>
                                <h4 class="mb-4"><%= question.question %></h4>
                                <div class="options mt-3">
                                    <% question.options.forEach((option, idx) => { %>
                                        <label class="option-label" data-option-index="<%= idx %>">
                                            <input type="radio" name="mcq-<%= question._id %>" value="<%= option %>" class="mcq-option">
                                            <span class="ml-2"><%= option %></span>
                                        </label>
                                    <% }); %>
                                </div>
                                <div class="navigation-buttons">
                                    <button type="button" class="btn btn-outline-secondary prev-question-btn" <%= index === 0 ? 'disabled' : '' %>>Previous</button>
                                    <button type="button" class="btn btn-primary next-question-btn">Next</button>
                                </div>
                            </div>
                        <% }); %>

                        <!-- Coding Questions -->
                        <% exam.codingQuestions.forEach((question, index) => { %>
                            <div class="question-card" id="coding-question-<%= index %>">
                                <div class="question-status">
                                    <div>
                                        <span class="question-type-badge coding-badge">Coding</span>
                                    </div>
                                    <div>
                                        Question <%= index + 1 + exam.mcqQuestions.length %> of <%= totalQuestions %>
                                    </div>
                                </div>
                                <h4 class="mb-4"><%= question.question %></h4>
                                <textarea name="coding-<%= question._id %>" class="coding-textarea mt-3" rows="8" placeholder="Write your code here..."></textarea>
                                <div class="navigation-buttons">
                                    <button type="button" class="btn btn-outline-secondary prev-question-btn">Previous</button>
                                    <button type="button" class="btn btn-primary next-question-btn" <%= index === exam.codingQuestions.length - 1 ? 'disabled' : '' %>>Next</button>
                                </div>
                            </div>
                        <% }); %>

                        <div class="submit-btn">
                            <button type="button" id="reviewBtn" class="btn btn-info btn-lg px-4 mr-2">Review Answers</button>
                            <button type="submit" id="submitTestBtn" class="btn btn-success btn-lg px-5">Submit Test</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-labelledby="reviewModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reviewModalLabel">Review Your Answers</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="review-summary mb-3">
                            <div class="alert alert-info">
                                <strong>Summary:</strong> <span id="answeredCount">0</span> of <span id="totalQuestionsCount"><%= totalQuestions %></span> questions answered
                            </div>
                        </div>
                        <div class="review-list">
                            <h6>MCQ Questions:</h6>
                            <ul class="list-group mb-3">
                                <% exam.mcqQuestions.forEach((question, index) => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-question-type="mcq" data-question-index="<%= index %>">
                                        <div>Q<%= index + 1 %>: <%= question.question.substring(0, 50) %>...</div>
                                        <span class="badge badge-secondary status-badge">Not answered</span>
                                    </li>
                                <% }); %>
                            </ul>
                            
                            <h6>Coding Questions:</h6>
                            <ul class="list-group">
                                <% exam.codingQuestions.forEach((question, index) => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-question-type="coding" data-question-index="<%= index %>">
                                        <div>Q<%= index + 1 + exam.mcqQuestions.length %>: <%= question.question.substring(0, 50) %>...</div>
                                        <span class="badge badge-secondary status-badge">Not answered</span>
                                    </li>
                                <% }); %>
                            </ul>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" id="submitFromReview">Submit Test</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="examin" class="integrity-panel mt-4">
            <h4 class="mb-3">Exam Integrity Monitor</h4>
            <div class="row">
                <div class="col-md-6">
                    <div class="integrity-item">
                        <strong>Tab Changes Detected:</strong> <span id="tabChangeCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Mouse Left Workspace:</strong> <span id="mouseOutCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Fullscreen Exit Attempts:</strong> <span id="fullscreenExitCount" class="badge badge-secondary">0</span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="integrity-item">
                        <strong>Copy Attempts:</strong> <span id="copyAttemptCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Paste Attempts:</strong> <span id="pasteAttemptCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Focus Changes Detected:</strong> <span id="focusChangeCount" class="badge badge-secondary">0</span>
                    </div>
                </div>
            </div>
            <div class="integrity-item mt-2 total-violations">
                <strong>Total Integrity Violations:</strong> <span id="totalViolations" class="badge badge-danger">0</span>
            </div>
            <div class="integrity-item">
                <strong>Last Event:</strong> <span id="lastEvent" class="badge badge-info">N/A</span>
            </div>
            <div class="integrity-item">
                <strong>Screen Configuration:</strong> <span id="screenConfig" class="badge badge-info">Checking...</span>
            </div>
        </div>

        <footer class="footer text-center">
            <p>© 2025 Earthling Aid Tech | Academic Assessment Platform</p>
        </footer>
    </div>

    <canvas id="canvas" width="320" height="240"></canvas>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

    <script>
      
        let tabChangeCount = 0;
        let mouseOutCount = 0;
        let fullscreenExitCount = 0;
        let copyAttemptCount = 0;
        let pasteAttemptCount = 0;
        let focusChangeCount = 0;
        let isFullscreenActive = false;
        let totalViolations = 0;
        let lastTabFocusTime = 0;
        const TAB_FOCUS_COOLDOWN = 1000; 
        
      
        let currentQuestionType = "mcq";
        let currentQuestionIndex = 0;
        let startTime = null;
        let examTimerInterval = null;
        
       
        let answeredQuestions = {
            mcq: Array(<%= exam.mcqQuestions.length %>).fill(false),
            coding: Array(<%= exam.codingQuestions.length %>).fill(false)
        };

       
        function sendIntegrityUpdate(eventType) {
            const data = {
                examId: "<%= exam._id %>", 
                userId: "<%= user._id %>", 
                eventType: eventType
            };

            fetch('/update-integrity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => console.log('Integrity event logged:', data))
            .catch(error => console.error('Error sending integrity update:', error));
        }

        function updateUI() {
            document.getElementById('tabChangeCount').textContent = tabChangeCount;
            document.getElementById('mouseOutCount').textContent = mouseOutCount;
            document.getElementById('fullscreenExitCount').textContent = fullscreenExitCount;
            document.getElementById('copyAttemptCount').textContent = copyAttemptCount;
            document.getElementById('pasteAttemptCount').textContent = pasteAttemptCount;
            document.getElementById('focusChangeCount').textContent = focusChangeCount;
            document.getElementById('totalViolations').textContent = totalViolations;
        }

        function updateStatus(message) {
            document.getElementById('lastEvent').textContent = message;
        }

        function checkAndSubmitTest() {
            if (totalViolations >= 3) {
                updateStatus("Auto-submitting test due to integrity violations");
                console.log("Auto-submitting test due to 3 or more integrity violations");
                
                // Get the form and submit it
                document.getElementById('examForm').submit();
            }
        }

        function handleTabChange() {
            if (document.hidden) {
                // Only count tab change if it's not immediately after a focus change
                const currentTime = Date.now();
                if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
                    tabChangeCount++;
                    totalViolations++;
                    sendIntegrityUpdate("tabChanges");
                    updateStatus("Tab change detected");
                    updateUI();
                    checkAndSubmitTest();
                }
            }
        }

        function handleMouseOut(event) {
            if (event.clientX < 0 || event.clientX > window.innerWidth - 1 || event.clientY < 0 || event.clientY > window.innerHeight - 1) {
                mouseOutCount++;
                totalViolations++;
                sendIntegrityUpdate("mouseOuts");
                updateStatus("Mouse left workspace");
                updateUI();
                checkAndSubmitTest();
            }
        }

        function handleFocusChange(event) {
            if (event.type === 'blur') {
                // Only count focus change if it's not immediately after a tab change
                const currentTime = Date.now();
                if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
                    focusChangeCount++;
                    lastTabFocusTime = currentTime;
                    
                    // Check if this is coming from a tab change or standalone focus change
                    if (!document.hidden) {
                        // If document is not hidden, this is a standalone focus change
                        totalViolations++;
                        sendIntegrityUpdate("focusChanges");
                        updateStatus("Focus change detected");
                        updateUI();
                        checkAndSubmitTest();
                    }
                }
            }
        }

        function enterFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            }
            else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
        }
        
        // Exam timer functions
        function startExamTimer() {
            startTime = new Date().getTime();
            examTimerInterval = setInterval(updateExamTimer, 1000);
        }
        
        function updateExamTimer() {
            const currentTime = new Date().getTime();
            const elapsedTime = currentTime - startTime;
            
            // Convert elapsed time to hours, minutes, seconds
            const hours = Math.floor(elapsedTime / (1000 * 60 * 60));
            const minutes = Math.floor((elapsedTime % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((elapsedTime % (1000 * 60)) / 1000);
            
            // Format time as HH:MM:SS
            const formattedTime = 
                (hours < 10 ? "0" + hours : hours) + ":" +
                (minutes < 10 ? "0" + minutes : minutes) + ":" +
                (seconds < 10 ? "0" + seconds : seconds);
                
            document.getElementById('timeDisplay').textContent = formattedTime;
        }
        
        // Navigation functions
        function showQuestion(type, index) {
            // Hide all question cards
            document.querySelectorAll('.question-card').forEach(card => {
                card.classList.remove('active');
            });
            
            // Show the selected question card
            document.getElementById(`${type}-question-${index}`).classList.add('active');
            
            // Update navigation sidebar
            document.querySelectorAll('.question-nav-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Find and activate the correct nav item
            document.querySelectorAll('.question-nav-item').forEach(item => {
                if (item.getAttribute('data-question-type') === type && 
                    parseInt(item.getAttribute('data-question-index')) === index) {
                    item.classList.add('active');
                }
            });
            
            // Update current question tracking
            currentQuestionType = type;
            currentQuestionIndex = index;
        }
        
        function nextQuestion() {
            if (currentQuestionType === "mcq" && currentQuestionIndex < <%= exam.mcqQuestions.length - 1 %>) {
                // Go to next MCQ
                showQuestion("mcq", currentQuestionIndex + 1);
            } else if (currentQuestionType === "mcq" && currentQuestionIndex === <%= exam.mcqQuestions.length - 1 %>) {
                // Switch from MCQ to coding if available
                if (<%= exam.codingQuestions.length %> > 0) {
                    showQuestion("coding", 0);
                }
            } else if (currentQuestionType === "coding" && currentQuestionIndex < <%= exam.codingQuestions.length - 1 %>) {
                // Go to next coding question
                showQuestion("coding", currentQuestionIndex + 1);
            }
        }
        
        function prevQuestion() {
            if (currentQuestionType === "coding" && currentQuestionIndex > 0) {
                // Go to previous coding question
                showQuestion("coding", currentQuestionIndex - 1);
            } else if (currentQuestionType === "coding" && currentQuestionIndex === 0) {
                // Switch from coding to last MCQ
                showQuestion("mcq", <%= exam.mcqQuestions.length - 1 %>);
            } else if (currentQuestionType === "mcq" && currentQuestionIndex > 0) {
                // Go to previous MCQ
                showQuestion("mcq", currentQuestionIndex - 1);
            }
        }
        
        function updateAnsweredStatus() {
            // Count MCQ answers
            document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                const questionId = radio.name.split('-')[1];
                const mcqIndex = Array.from(document.querySelectorAll('.question-card')).findIndex(
                    card => card.querySelector(`input[name="mcq-${questionId}"]`)
                );
                
                if (mcqIndex !== -1) {
                    answeredQuestions.mcq[mcqIndex] = true;
                    
                    // Update nav item
                    document.querySelectorAll('.question-nav-item').forEach(item => {
                        if (item.getAttribute('data-question-type') === 'mcq' && 
                            parseInt(item.getAttribute('data-question-index')) === mcqIndex) {
                            item.classList.add('answered');
                        }
                    });
                }
            });
            
            // Count coding answers
            document.querySelectorAll('textarea').forEach((textarea, index) => {
                if (textarea.value.trim() !== '') {
                    answeredQuestions.coding[index] = true;
                    
                    // Update nav item
                    document.querySelectorAll('.question-nav-item').forEach(item => {
                        if (item.getAttribute('data-question-type') === 'coding' && 
                            parseInt(item.getAttribute('data-question-index')) === index) {
                            item.classList.add('answered');
                        }
                    });
                }
            });
            
            // Update review modal
            updateReviewModal();
        }
        
        function updateReviewModal() {
            const answeredCount = answeredQuestions.mcq.filter(Boolean).length + 
                                 answeredQuestions.coding.filter(Boolean).length;
            
            document.getElementById('answeredCount').textContent = answeredCount;
            
            // Update MCQ status in review modal
            answeredQuestions.mcq.forEach((isAnswered, index) => {
                const listItem = document.querySelector(`.review-list li[data-question-type="mcq"][data-question-index="${index}"]`);
                const statusBadge = listItem.querySelector('.status-badge');
                
                if (isAnswered) {
                    statusBadge.textContent = "Answered";
                    statusBadge.classList.remove('badge-secondary');
                    statusBadge.classList.add('badge-success');
                } else {
                    statusBadge.textContent = "Not answered";
                    statusBadge.classList.remove('badge-success');
                    statusBadge.classList.add('badge-secondary');
                }
            });
            
            // Update coding status in review modal
            answeredQuestions.coding.forEach((isAnswered, index) => {
                const listItem = document.querySelector(`.review-list li[data-question-type="coding"][data-question-index="${index}"]`);
                const statusBadge = listItem.querySelector('.status-badge');
                
                if (isAnswered) {
                    statusBadge.textContent = "Answered";
                    statusBadge.classList.remove('badge-secondary');
                    statusBadge.classList.add('badge-success');
                } else {
                    statusBadge.textContent = "Not answered";
                    statusBadge.classList.remove('badge-success');
                    statusBadge.classList.add('badge-secondary');
                }
            });
        }
        
        function startWebcamCapture() {
            const canvas = document.getElementById('canvas');
            const context = canvas.getContext('2d');

            navigator.mediaDevices.getUserMedia({ video: true })
                .then((stream) => {
                    const video = document.createElement('video');
                    video.srcObject = stream;
                    video.play();

                    setInterval(() => {
                        context.drawImage(video, 0, 0, canvas.width, canvas.height);

                        canvas.toBlob((blob) => {
                            if (!blob) return;

                            const formData = new FormData();
                            formData.append('image', blob, `capture-${Date.now()}.png`);
                            formData.append('userId', "<%= user._id %>");
                            formData.append('examId', "<%= exam._id %>");

                            fetch('/save-image', { 
                                method: 'POST',
                                body: formData,
                            })
                            
                            .then(response => response.json())
                            .then(data => console.log('Image saved:', data))
                            .catch(error => console.error('Error saving image:', error));

                        }, 'image/png');

                    }, 5000);
                })
                .catch((error) => {
                    console.error("Error accessing webcam:", error);
                    alert("Unable to access the webcam. Please allow access.");
                });
        }

        function preventBackButton() {
            window.history.pushState(null, "", window.location.href);
            window.onpopstate = function() {
                window.history.pushState(null, "", window.location.href);
            };
        }

        // Set up event listeners
        document.addEventListener('visibilitychange', handleTabChange);
        window.addEventListener('blur', handleFocusChange);
        window.addEventListener('focus', handleFocusChange);
        
        document.addEventListener('fullscreenchange', () => {
            if (!document.fullscreenElement) {
                fullscreenExitCount++;
                totalViolations++;
                enterFullscreen();
                sendIntegrityUpdate("fullscreenExits");
                updateStatus("Fullscreen exited");
                updateUI();
                checkAndSubmitTest();
            } else {
                if (!isFullscreenActive) {
                    document.addEventListener('mouseout', handleMouseOut);
                    isFullscreenActive = true;
                    enterFullscreen();
                }
                updateStatus("Fullscreen entered");
            }
        });

        document.addEventListener('copy', (e) => {
            e.preventDefault();
            copyAttemptCount++;
            sendIntegrityUpdate("copyAttempts");
            updateStatus("Copy attempt detected");
            updateUI();
        });

        document.addEventListener('paste', (e) => {
            e.preventDefault();
            pasteAttemptCount++;
            sendIntegrityUpdate("pasteAttempts");
            updateStatus("Paste attempt detected");
            updateUI();
        });
        
        // Question navigation event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Next question buttons
            document.querySelectorAll('.next-question-btn').forEach(button => {
                button.addEventListener('click', function() {
                    nextQuestion();
                });
            });
            
            // Previous question buttons
            document.querySelectorAll('.prev-question-btn').forEach(button => {
                button.addEventListener('click', function() {
                    prevQuestion();
                });
            });
            
            // Question nav sidebar items
            document.querySelectorAll('.question-nav-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    const type = this.getAttribute('data-question-type');
                    const index = parseInt(this.getAttribute('data-question-index'));
                    showQuestion(type, index);
                });
            });
            
            // MCQ option selection
            document.querySelectorAll('.option-label').forEach(label => {
                label.addEventListener('click', function() {
                    // Clear selected state for all options in the same question
                    const questionCard = this.closest('.question-card');
                    questionCard.querySelectorAll('.option-label').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    
                    // Apply selected state to this option
                    this.classList.add('selected');
                    
                    // Update answered status
                    updateAnsweredStatus();
                });
            });
            
            // Coding textarea input
            document.querySelectorAll('.coding-textarea').forEach(textarea => {
                textarea.addEventListener('input', function() {
                    updateAnsweredStatus();
                });
            });
            
            // Review button
            document.getElementById('reviewBtn').addEventListener('click', function() {
                updateAnsweredStatus();
                $('#reviewModal').modal('show');
            });
            
            // Submit from review modal
            document.getElementById('submitFromReview').addEventListener('click', function() {
                $('#reviewModal').modal('hide');
                document.getElementById('examForm').submit();
            });
            
            // Review modal question navigation
            document.querySelectorAll('.review-list li').forEach(item => {
                item.addEventListener('click', function() {
                    const type = this.getAttribute('data-question-type');
                    const index = parseInt(this.getAttribute('data-question-index'));
                    $('#reviewModal').modal('hide');
                    showQuestion(type, index);
                });
            });
        });
        
        // Start exam button
        document.getElementById("startExamBtn").addEventListener("click", function() {
            enterFullscreen();
            document.getElementById("examin").style.display = "none"
            document.getElementById("examContent").style.display = "block"; 
            this.style.display = "none";
            startExamTimer();
            preventBackButton();
            startWebcamCapture();
        });
        
        // For clicks anywhere - ensure fullscreen
        document.addEventListener('click', () => {
            if (!document.fullscreenElement) {
                enterFullscreen();
                updateStatus("Fullscreen mode ensured after click");
            }
        });
        
        window.onload = () => {
            preventBackButton();
            document.getElementById('screenConfig').textContent = 
                `${window.innerWidth}x${window.innerHeight}`;
        };
    </script>
</body>
</html>