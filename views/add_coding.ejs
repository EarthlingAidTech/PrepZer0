<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Coding Question</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4f46e5;
      --primary-hover: #4338ca;
      --dark-bg: #111827;
      --card-bg: #1f2937;
      --light-text: #f9fafb;
      --secondary-text: #9ca3af;
      --border-color: #374151;
      --row-hover: #2d3748;
      --danger: #ef4444;
      --warning: #f59e0b;
      --info: #3b82f6;
      --success: #10b981;
      --input-bg: #374151;
      --input-border: #4b5563;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
    }
    
    body {
      background-color: var(--dark-bg);
      color: var(--light-text);
      min-height: 100vh;
      line-height: 1.6;
    }
    
    .header {
      background-color: var(--card-bg);
      padding: 1rem 1.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 2rem;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .logo-section {
      display: flex;
      align-items: center;
    }
    
    .logo-section img {
      width: 36px;
      height: 36px;
      margin-right: 0.75rem;
    }
    
    .logo-section h1 {
      font-size: 1.5rem;
      font-weight: 600;
      margin: 0;
      background: linear-gradient(to right, var(--primary), #8b5cf6);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    
    .breadcrumb-nav {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--secondary-text);
      font-size: 0.875rem;
    }
    
    .breadcrumb-nav a {
      color: var(--primary);
      text-decoration: none;
    }
    
    .breadcrumb-nav a:hover {
      color: var(--primary-hover);
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 1.5rem;
      width: 100%;
    }
    
    .card {
      background-color: var(--card-bg);
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      overflow: hidden;
      margin-bottom: 2rem;
      border: none;
    }
    
    .card-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border-color);
      background-color: var(--card-bg);
    }
    
    .card-title {
      font-size: 1.5rem;
      font-weight: 600;
      margin: 0;
      color: var(--light-text);
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .section-title {
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--light-text);
      margin-bottom: 1.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--light-text);
      font-size: 0.875rem;
    }
    
    .required::after {
      content: " *";
      color: var(--danger);
    }
    
    .form-control {
      width: 100%;
      padding: 0.75rem;
      background-color: var(--input-bg);
      border: 1px solid var(--input-border);
      border-radius: 0.5rem;
      font-size: 0.875rem;
      color: var(--light-text);
      transition: all 0.2s ease;
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }
    
    .form-control::placeholder {
      color: var(--secondary-text);
    }
    
    textarea.form-control {
      min-height: 100px;
      font-family: 'Fira Code', 'Consolas', monospace;
      resize: vertical;
    }
    
    select.form-control {
      height: 44px;
    }
    
    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
    }
    
    .btn {
      border-radius: 0.5rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
      padding: 0.75rem 1.5rem;
      font-size: 0.875rem;
      border: none;
      cursor: pointer;
      text-decoration: none;
    }
    
    .btn-primary {
      background-color: var(--primary);
      color: white;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-hover);
      transform: translateY(-1px);
    }
    
    .btn-secondary {
      background-color: var(--secondary-text);
      color: white;
    }
    
    .btn-secondary:hover {
      background-color: #6b7280;
    }
    
    .btn-danger {
      background-color: var(--danger);
      color: white;
    }
    
    .btn-danger:hover {
      background-color: #dc2626;
    }
    
    .btn-sm {
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }
    
    .test-case {
      background-color: rgba(55, 65, 81, 0.5);
      border-radius: 0.75rem;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      position: relative;
      border: 1px solid var(--border-color);
      transition: all 0.2s ease;
    }
    
    .test-case:hover {
      border-color: var(--primary);
      box-shadow: 0 0 0 1px rgba(79, 70, 229, 0.1);
    }
    
    .test-case-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .test-case-title {
      font-size: 1rem;
      font-weight: 600;
      color: var(--light-text);
      margin: 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .remove-btn {
      background: var(--danger);
      color: white;
      border: none;
      width: 32px;
      height: 32px;
      border-radius: 50%;
      font-size: 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }
    
    .remove-btn:hover {
      background: #dc2626;
      transform: scale(1.05);
    }
    
    .checkbox-group {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-top: 1rem;
      padding: 1rem;
      background-color: rgba(79, 70, 229, 0.05);
      border-radius: 0.5rem;
      border: 1px solid rgba(79, 70, 229, 0.1);
    }
    
    .checkbox-group input[type="checkbox"] {
      width: 18px;
      height: 18px;
      margin: 0;
      accent-color: var(--primary);
    }
    
    .checkbox-group label {
      margin: 0;
      font-weight: normal;
      color: var(--light-text);
      cursor: pointer;
    }
    
    .controls {
      margin-top: 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .success-message {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success);
      border: 1px solid rgba(16, 185, 129, 0.2);
      border-radius: 0.5rem;
      padding: 1rem;
      margin-bottom: 1.5rem;
      display: none;
      align-items: center;
      gap: 0.5rem;
    }
    
    .error {
      color: var(--danger);
      font-size: 0.8rem;
      margin-top: 0.25rem;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }
    
    .accordion {
      margin-top: 1.5rem;
    }
    
    .accordion-item {
      margin-bottom: 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: 0.5rem;
      overflow: hidden;
      background-color: var(--input-bg);
    }
    
    .accordion-button {
      width: 100%;
      padding: 1rem 1.25rem;
      background: var(--input-bg);
      border: none;
      text-align: left;
      cursor: pointer;
      font-weight: 500;
      color: var(--light-text);
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.2s ease;
    }
    
    .accordion-button:hover {
      background: var(--row-hover);
    }
    
    .accordion-button::after {
      content: '⌄';
      font-size: 1.2rem;
      transition: transform 0.2s ease;
    }
    
    .accordion-button.active::after {
      transform: rotate(180deg);
    }
    
    .accordion-collapse {
      display: none;
      padding: 1.25rem;
      border-top: 1px solid var(--border-color);
      background-color: rgba(55, 65, 81, 0.3);
    }
    
    .accordion-collapse.show {
      display: block;
    }
    
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }
    
    .badge {
      padding: 0.25rem 0.75rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
    }
    
    .badge-info {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--info);
      border: 1px solid rgba(59, 130, 246, 0.2);
    }
    
    /* Mobile responsive styles */
    @media (max-width: 768px) {
      .header {
        padding: 1rem;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .container {
        padding: 0 1rem;
      }
      
      .form-row {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      .controls {
        flex-direction: column;
        align-items: stretch;
      }
      
      .controls .btn {
        width: 100%;
        justify-content: center;
      }
      
      .test-case {
        padding: 1rem;
      }
      
      .accordion-button {
        padding: 0.75rem 1rem;
      }
      
      .accordion-collapse {
        padding: 1rem;
      }
    }
    
    @media (max-width: 576px) {
      .card-header, .card-body {
        padding: 1rem;
      }
      
      .section-title {
        font-size: 1rem;
      }
      
      .btn {
        padding: 0.625rem 1.25rem;
        font-size: 0.8rem;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="logo-section">
      <img src="../uploads/unnamed-removebg-preview.png" alt="Logo">
      <h1>PrepZer0</h1>
    </div>
    <div class="breadcrumb-nav">
      <a href="/admin/dashboard">Dashboard</a>
      <i class="fas fa-chevron-right"></i>
      <a href="/admin/exams">Exams</a>
      <i class="fas fa-chevron-right"></i>
      <span>Add Coding Question</span>
    </div>
  </div>

  <div class="container">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">
          <i class="fas fa-code"></i>
          Add Coding Question
        </h2>
      </div>
      
      <div class="card-body">
        <div id="successMessage" class="success-message">
          <i class="fas fa-check-circle"></i>
          Question added successfully!
        </div>
        
        <form id="codingQuestionForm" action='/admin/exam/<%= examId %>/add/coding' method="POST">
          <!-- Basic Info Section -->
          <div class="section-title">
            <i class="fas fa-info-circle"></i>
            Basic Information
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="questionTile" class="form-label required">Question Title</label>
              <input type="text" id="questionTile" name="questionTile" class="form-control" placeholder="Enter question title" required>
            </div>
            <div class="form-group">
              <label for="maxMarks" class="form-label required">Maximum Marks</label>
              <input type="number" id="maxMarks" name="maxMarks" class="form-control" min="1" placeholder="Enter maximum marks" required>
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="level" class="form-label required">Difficulty Level</label>
              <select id="level" name="level" class="form-control" required>
                <option value="">Select Difficulty</option>
                <option value="easy">🟢 Easy</option>
                <option value="medium">🟡 Medium</option>
                <option value="hard">🔴 Hard</option>
              </select>
            </div>
            <div class="form-group">
              <label for="classification" class="form-label required">Classification</label>
              <select id="classification" name="classification" class="form-control" required>
                <option value="">Select Classification</option>
                <option value="Arrays">📊 Arrays</option>
                <option value="Strings">📝 Strings</option>
                <option value="Linked Lists">🔗 Linked Lists</option>
                <option value="Stacks">📚 Stacks</option>
                <option value="Queues">📋 Queues</option>
                <option value="Trees">🌳 Trees</option>
                <option value="Graphs">🕸️ Graphs</option>
                <option value="Recursion">🔄 Recursion</option>
                <option value="Dynamic Programming">⚡ Dynamic Programming</option>
                <option value="Sorting">📈 Sorting</option>
                <option value="Searching">🔍 Searching</option>
                <option value="Hashing"># Hashing</option>
                <option value="Greedy Algorithms">🎯 Greedy Algorithms</option>
                <option value="Backtracking">↩️ Backtracking</option>
                <option value="Math">🧮 Math</option>
                <option value="Bit Manipulation">🔧 Bit Manipulation</option>
                <option value="Matrix">⬜ Matrix</option>
                <option value="SQL">🗄️ SQL</option>
              </select>
            </div>
          </div>
          
          <!-- Question Content Section -->
          <div class="section-title">
            <i class="fas fa-file-text"></i>
            Question Content
          </div>
          
          <div class="form-group">
            <label for="questiontext" class="form-label required">Question Text</label>
            <textarea id="questiontext" name="questiontext" class="form-control" placeholder="Describe the problem statement..." required></textarea>
          </div>
          
          <div class="form-group">
            <label for="constraits" class="form-label">Constraints</label>
            <textarea id="constraits" name="constraits" class="form-control" placeholder="Enter constraints (e.g., 1 ≤ n ≤ 10^5)"></textarea>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="inputFormat" class="form-label">Input Format</label>
              <textarea id="inputFormat" name="inputFormat" class="form-control" placeholder="Describe the input format..."></textarea>
            </div>
            <div class="form-group">
              <label for="outputFormat" class="form-label">Output Format</label>
              <textarea id="outputFormat" name="outputFormat" class="form-control" placeholder="Describe the output format..."></textarea>
            </div>
          </div>
          
          <!-- Examples Section -->
          <div class="section-title">
            <i class="fas fa-lightbulb"></i>
            Sample Examples
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="sampleInput" class="form-label required">Sample Input</label>
              <textarea id="sampleInput" name="sampleInput" class="form-control" placeholder="Enter sample input..." required></textarea>
            </div>
            <div class="form-group">
              <label for="sampleOutput" class="form-label required">Sample Output</label>
              <textarea id="sampleOutput" name="sampleOutput" class="form-control" placeholder="Enter expected output..." required></textarea>
            </div>
          </div>
          
          <!-- Starter Code Section -->
          <div class="section-title">
            <i class="fas fa-code-branch"></i>
            Starter Code
          </div>
          
         
          
          <!-- Language-specific starter code accordion -->
          <div class="accordion" id="starterCodeAccordion">
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button type="button" class="accordion-button collapsed" data-target="#cppCode">
                  <span><i class="fab fa-cuttlefish"></i> C++ Starter Code</span>
                </button>
              </h2>
              <div id="cppCode" class="accordion-collapse">
                <div class="form-group">
                  <textarea id="cppStarterCode" name="starterCode_cpp" class="form-control" placeholder="Enter C++ starter code here..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button type="button" class="accordion-button collapsed" data-target="#cCode">
                  <span><i class="fas fa-code"></i> C Starter Code</span>
                </button>
              </h2>
              <div id="cCode" class="accordion-collapse">
                <div class="form-group">
                  <textarea id="cStarterCode" name="starterCode_c" class="form-control" placeholder="Enter C starter code here..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button type="button" class="accordion-button collapsed" data-target="#javaCode">
                  <span><i class="fab fa-java"></i> Java Starter Code</span>
                </button>
              </h2>
              <div id="javaCode" class="accordion-collapse">
                <div class="form-group">
                  <textarea id="javaStarterCode" name="starterCode_java" class="form-control" placeholder="Enter Java starter code here..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button type="button" class="accordion-button collapsed" data-target="#pythonCode">
                  <span><i class="fab fa-python"></i> Python Starter Code</span>
                </button>
              </h2>
              <div id="pythonCode" class="accordion-collapse">
                <div class="form-group">
                  <textarea id="pythonStarterCode" name="starterCode_python" class="form-control" placeholder="Enter Python starter code here..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button type="button" class="accordion-button collapsed" data-target="#csharpCode">
                  <span><i class="fab fa-microsoft"></i> C# Starter Code</span>
                </button>
              </h2>
              <div id="csharpCode" class="accordion-collapse">
                <div class="form-group">
                  <textarea id="csharpStarterCode" name="starterCode_csharp" class="form-control" placeholder="Enter C# starter code here..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button type="button" class="accordion-button collapsed" data-target="#jsCode">
                  <span><i class="fab fa-js-square"></i> JavaScript Starter Code</span>
                </button>
              </h2>
              <div id="jsCode" class="accordion-collapse">
                <div class="form-group">
                  <textarea id="jsStarterCode" name="starterCode_javascript" class="form-control" placeholder="Enter JavaScript starter code here..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Test Cases Section -->
          <div class="section-title">
            <i class="fas fa-flask"></i>
            Test Cases
          </div>
          <button type="button" id="addTestCase" class="btn btn-secondary btn-sm">
            <i class="fas fa-plus"></i>
            Add Test Case
          </button>
          
          <div id="testCasesContainer">
            <!-- Test cases will be added here dynamically -->
          </div>
          
          <!-- Form Controls -->
          <div class="controls">
            <button type="button" id="clearForm" class="btn btn-danger">
              <i class="fas fa-trash"></i>
              Clear Form
            </button>
            <button type="submit" id="submitBtn" class="btn btn-primary">
              <i class="fas fa-save"></i>
              Submit Question
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let testCaseCount = 0;
      const testCasesContainer = document.getElementById('testCasesContainer');
      const addTestCaseBtn = document.getElementById('addTestCase');
      const clearFormBtn = document.getElementById('clearForm');
      const form = document.getElementById('codingQuestionForm');
      const successMessage = document.getElementById('successMessage');
      const submitBtn = document.getElementById('submitBtn');
      
      // Add test case function
      function addTestCase() {
        testCaseCount++;
        
        const testCaseDiv = document.createElement('div');
        testCaseDiv.className = 'test-case';
        testCaseDiv.setAttribute('data-id', testCaseCount);
        
        testCaseDiv.innerHTML = `
          <div class="test-case-header">
            <h3 class="test-case-title">
              <i class="fas fa-vial"></i>
              Test Case #${testCaseCount}
            </h3>
            <button type="button" class="remove-btn" onclick="removeTestCase(${testCaseCount})" title="Remove test case">×</button>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="testInput${testCaseCount}" class="form-label required">Input</label>
              <textarea id="testInput${testCaseCount}" name="testCases[${testCaseCount-1}][input]" class="form-control" placeholder="Enter test input..." required></textarea>
            </div>
            <div class="form-group">
              <label for="expectedOutput${testCaseCount}" class="form-label required">Expected Output</label>
              <textarea id="expectedOutput${testCaseCount}" name="testCases[${testCaseCount-1}][expectedOutput]" class="form-control" placeholder="Enter expected output..." required></textarea>
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="timeout${testCaseCount}" class="form-label">Timeout (seconds)</label>
              <input type="number" id="timeout${testCaseCount}" name="testCases[${testCaseCount-1}][timeout]" class="form-control" value="2" min="1" max="30" placeholder="2">
            </div>
            <div class="form-group">
              <label for="memoryLimit${testCaseCount}" class="form-label">Memory Limit (MB)</label>
              <input type="number" id="memoryLimit${testCaseCount}" name="testCases[${testCaseCount-1}][memoryLimit]" class="form-control" value="256" min="64" max="1024" placeholder="256">
            </div>
          </div>
          
          <div class="checkbox-group">
            <input type="checkbox" id="isPublic${testCaseCount}" name="testCases[${testCaseCount-1}][isPublic]" value="true">
            <label for="isPublic${testCaseCount}">
              <i class="fas fa-eye"></i>
              Make this test case visible to students
            </label>
          </div>
        `;
        
        testCasesContainer.appendChild(testCaseDiv);
      }
      
      // Remove test case function
      window.removeTestCase = function(id) {
        const testCase = document.querySelector(`.test-case[data-id="${id}"]`);
        if (testCase) {
          testCase.style.opacity = '0';
          testCase.style.transform = 'translateX(-100%)';
          setTimeout(() => {
            testCase.remove();
            updateTestCaseIndices();
          }, 200);
        }
      }
      
      // Update test case indices after removal
      function updateTestCaseIndices() {
        const testCases = testCasesContainer.querySelectorAll('.test-case');
        testCases.forEach((testCase, index) => {
          const inputs = testCase.querySelectorAll('input, textarea');
          inputs.forEach(input => {
            const name = input.getAttribute('name');
            if (name && name.includes('testCases[')) {
              const newName = name.replace(/testCases\[\d+\]/, `testCases[${index}]`);
              input.setAttribute('name', newName);
            }
          });
          
          const header = testCase.querySelector('.test-case-title');
          if (header) {
            header.innerHTML = `<i class="fas fa-vial"></i> Test Case #${index + 1}`;
          }
        });
      }
      
      // Add first test case by default
      addTestCase();
      
      // Add test case button click event
      addTestCaseBtn.addEventListener('click', addTestCase);
      
      // Clear form button click event
      clearFormBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to clear all form data?')) {
          form.reset();
          testCasesContainer.innerHTML = '';
          testCaseCount = 0;
          addTestCase(); // Add one default test case after clearing
          successMessage.style.display = 'none';
        }
      });
      
      // Handle accordion toggling
      document.querySelectorAll('.accordion-button').forEach(button => {
        button.addEventListener('click', function() {
          const target = document.querySelector(this.getAttribute('data-target'));
          if (target) {
            const isOpen = target.classList.contains('show');
            
            // Close all accordions
            document.querySelectorAll('.accordion-collapse').forEach(collapse => {
              collapse.classList.remove('show');
            });
            document.querySelectorAll('.accordion-button').forEach(btn => {
              btn.classList.remove('active');
            });
            
            // Open clicked accordion if it wasn't already open
            if (!isOpen) {
              target.classList.add('show');
              this.classList.add('active');
            }
          }
        });
      });
      
      // Real-time validation
      form.addEventListener('input', function(e) {
        if (e.target.hasAttribute('required')) {
          const errorMsg = e.target.parentNode.querySelector('.error');
          if (e.target.value.trim() && errorMsg) {
            errorMsg.remove();
          }
        }
      });
      
      // Form submission
      form.addEventListener('submit', function(e) {
        // Show loading state
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
        submitBtn.disabled = true;
        form.classList.add('loading');
        
        // Validate required fields
        const requiredFields = form.querySelectorAll('[required]');
        let isValid = true;
        
        // Remove existing error messages
        document.querySelectorAll('.error').forEach(error => error.remove());
        
        requiredFields.forEach(field => {
          if (!field.value.trim()) {
            isValid = false;
            e.preventDefault();
            
            // Add error message
            const errorMsgElement = document.createElement('div');
            errorMsgElement.className = 'error';
            errorMsgElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> This field is required';
            field.parentNode.appendChild(errorMsgElement);
            
            // Focus first invalid field
            if (isValid === false && field === requiredFields[0]) {
              field.focus();
            }
          }
        });
        
        // Check if there's at least one test case
        if (testCasesContainer.children.length === 0) {
          isValid = false;
          e.preventDefault();
          
          // Show error message for test cases
          const testCaseError = document.createElement('div');
          testCaseError.className = 'error';
          testCaseError.innerHTML = '<i class="fas fa-exclamation-circle"></i> At least one test case is required';
          testCasesContainer.parentNode.insertBefore(testCaseError, testCasesContainer);
        }
        
        if (!isValid) {
          // Reset button state if validation fails
          submitBtn.innerHTML = '<i class="fas fa-save"></i> Submit Question';
          submitBtn.disabled = false;
          form.classList.remove('loading');
          
          // Scroll to first error
          const firstError = document.querySelector('.error');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
        
        // If valid, let the form submit normally
      });
      
      // Auto-resize textareas
      document.querySelectorAll('textarea').forEach(textarea => {
        textarea.addEventListener('input', function() {
          this.style.height = 'auto';
          this.style.height = (this.scrollHeight) + 'px';
        });
      });
      
      // Add tooltips for difficulty levels
      const difficultySelect = document.getElementById('level');
      difficultySelect.addEventListener('change', function() {
        const tooltips = {
          'easy': 'Basic problems that can be solved with simple algorithms',
          'medium': 'Moderate problems requiring some algorithmic knowledge',
          'hard': 'Complex problems requiring advanced algorithms and optimization'
        };
        
        if (tooltips[this.value]) {
          // You can add a tooltip display here if needed
          console.log(tooltips[this.value]);
        }
      });
    });
  </script>
</body>
</html>